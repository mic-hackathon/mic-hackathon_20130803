/*******************************************************************
  This file has been automatically generated by ispc
  DO NOT EDIT THIS FILE DIRECTLY
 *******************************************************************/

/* Provide Declarations */
#include <stdarg.h>
#include <setjmp.h>
#include <limits.h>
#include <stdlib.h>
#ifdef _MSC_VER
  #define NOMINMAX
  #include <windows.h>
#endif // _MSC_VER
#include <stdlib.h>
#include <stdint.h>
/* get a declaration for alloca */
#ifdef _MSC_VER
  #include <malloc.h>
  #define alloca _alloca
#else
  #include <alloca.h>
#endif

#undef ISPC_FAST_MATH
#include "knc.h"

/* Basic Library Function Declarations */
extern "C" {
int puts(unsigned char *);
unsigned int putchar(unsigned int);
int fflush(void *);
int printf(const unsigned char *, ...);
uint8_t *memcpy(uint8_t *, uint8_t *, uint64_t );
uint8_t *memset(uint8_t *, uint8_t, uint64_t );
void memset_pattern16(void *, const void *, uint64_t );
}

#ifndef __GNUC__  /* Can only support "linkonce" vars with GCC */
#define __attribute__(X)
#endif

#if defined(__GNUC__) && defined(__APPLE_CC__)
#define __EXTERNAL_WEAK__ __attribute__((weak_import))
#elif defined(__GNUC__)
#define __EXTERNAL_WEAK__ __attribute__((weak))
#else
#define __EXTERNAL_WEAK__
#endif

#if defined(__GNUC__) && defined(__APPLE_CC__)
#define __ATTRIBUTE_WEAK__
#elif defined(__GNUC__)
#define __ATTRIBUTE_WEAK__ __attribute__((weak))
#else
#define __ATTRIBUTE_WEAK__
#endif

#if defined(__GNUC__)
#define __HIDDEN__ __attribute__((visibility("hidden")))
#endif

#if (defined(__GNUC__) || defined(__clang__)) && !defined(__INTEL_COMPILER)
#define LLVM_NAN(NanStr)   __builtin_nan(NanStr)   /* Double */
#define LLVM_NANF(NanStr)  __builtin_nanf(NanStr)  /* Float */
#define LLVM_NANS(NanStr)  __builtin_nans(NanStr)  /* Double */
#define LLVM_NANSF(NanStr) __builtin_nansf(NanStr) /* Float */
#define LLVM_INF           __builtin_inf()         /* Double */
#define LLVM_INFF          __builtin_inff()        /* Float */
//#define LLVM_PREFETCH(addr,rw,locality) __builtin_prefetch(addr,rw,locality)
//#define __ATTRIBUTE_CTOR__ __attribute__((constructor))
//#define __ATTRIBUTE_DTOR__ __attribute__((destructor))
#elif defined(_MSC_VER) || defined(__INTEL_COMPILER)
#include <limits>
#define LLVM_NAN(NanStr)   std::numeric_limits<double>::quiet_NaN()
#define LLVM_NANF(NanStr)  std::numeric_limits<float>::quiet_NaN()
#define LLVM_NANS(NanStr)  std::numeric_limits<double>::signaling_NaN()
#define LLVM_NANSF(NanStr) std::numeric_limits<float>::signaling_NaN()
#define LLVM_INF           std::numeric_limits<double>::infinity()
#define LLVM_INFF          std::numeric_limits<float>::infinity()
//#define LLVM_PREFETCH(addr,rw,locality)            /* PREFETCH */
//#define __ATTRIBUTE_CTOR__
//#define __ATTRIBUTE_DTOR__
#else
#error "Not MSVC, clang, or g++?"
#endif

#if (defined(__GNUC__) || defined(__clang__))
#define LLVM_ASM(X) __asm(X)
#endif

#if defined(__clang__) || defined(__INTEL_COMPILER) || (__GNUC__ < 4) /* Old GCCs, or compilers not GCC */ 
#define __builtin_stack_save() 0   /* not implemented */
#define __builtin_stack_restore(X) /* noop */
#endif

#define CODE_FOR_MAIN() /* Any target-specific code for main()*/

#ifndef __cplusplus
typedef unsigned char bool;
#endif


/* Support for floating point constants */
typedef uint64_t ConstantDoubleTy;
typedef uint32_t ConstantFloatTy;
typedef struct { unsigned long long f1; unsigned short f2; unsigned short pad[3]; } ConstantFP80Ty;
typedef struct { uint64_t f1, f2; } ConstantFP128Ty;


/* Global Declarations */


/* Helper union for bitcasts */
typedef union {
  unsigned int Int32;
  unsigned long long Int64;
  float Float;
  double Double;
} llvmBitCastUnion;
/* Structure and array forward declarations */
struct l_unnamed_0;
struct l_unnamed_1;
struct l_unnamed_2;
struct l_unnamed_3;
struct l_unnamed_4;
struct l_unnamed_5;
struct l_array_6;

/* Structure and array contents */
struct l_unnamed_0 {
  static l_unnamed_0 init(uint32_t v0, uint32_t v1, uint64_t *v2, uint32_t v3, uint32_t *v4, __vec16_i1 v5) {
    l_unnamed_0 ret;
    ret.field0 = v0;
    ret.field1 = v1;
    ret.field2 = v2;
    ret.field3 = v3;
    ret.field4 = v4;
    ret.field5 = v5;
    return ret;
  }
  uint32_t field0;
  uint32_t field1;
  uint64_t *field2;
  uint32_t field3;
  uint32_t *field4;
  __vec16_i1 field5;
};

struct l_unnamed_1 {
  static l_unnamed_1 init(uint32_t v0, uint32_t v1, uint64_t *v2, uint32_t v3, uint32_t *v4, uint64_t *v5, __vec16_i1 v6) {
    l_unnamed_1 ret;
    ret.field0 = v0;
    ret.field1 = v1;
    ret.field2 = v2;
    ret.field3 = v3;
    ret.field4 = v4;
    ret.field5 = v5;
    ret.field6 = v6;
    return ret;
  }
  uint32_t field0;
  uint32_t field1;
  uint64_t *field2;
  uint32_t field3;
  uint32_t *field4;
  uint64_t *field5;
  __vec16_i1 field6;
};

struct l_unnamed_2 {
  static l_unnamed_2 init(uint32_t v0, uint32_t v1, uint64_t *v2, uint64_t *v3, __vec16_i1 v4) {
    l_unnamed_2 ret;
    ret.field0 = v0;
    ret.field1 = v1;
    ret.field2 = v2;
    ret.field3 = v3;
    ret.field4 = v4;
    return ret;
  }
  uint32_t field0;
  uint32_t field1;
  uint64_t *field2;
  uint64_t *field3;
  __vec16_i1 field4;
};

struct l_unnamed_3 {
  static l_unnamed_3 init(uint32_t v0, uint32_t v1, uint32_t *v2, uint64_t *v3, __vec16_i1 v4) {
    l_unnamed_3 ret;
    ret.field0 = v0;
    ret.field1 = v1;
    ret.field2 = v2;
    ret.field3 = v3;
    ret.field4 = v4;
    return ret;
  }
  uint32_t field0;
  uint32_t field1;
  uint32_t *field2;
  uint64_t *field3;
  __vec16_i1 field4;
};

struct l_unnamed_4 {
  static l_unnamed_4 init(uint32_t v0, uint32_t v1, uint64_t *v2, uint32_t *v3, uint32_t *v4, __vec16_i1 v5) {
    l_unnamed_4 ret;
    ret.field0 = v0;
    ret.field1 = v1;
    ret.field2 = v2;
    ret.field3 = v3;
    ret.field4 = v4;
    ret.field5 = v5;
    return ret;
  }
  uint32_t field0;
  uint32_t field1;
  uint64_t *field2;
  uint32_t *field3;
  uint32_t *field4;
  __vec16_i1 field5;
};

struct l_unnamed_5 {
  static l_unnamed_5 init(uint32_t *v0, uint32_t *v1, __vec16_i1 v2) {
    l_unnamed_5 ret;
    ret.field0 = v0;
    ret.field1 = v1;
    ret.field2 = v2;
    return ret;
  }
  uint32_t *field0;
  uint32_t *field1;
  __vec16_i1 field2;
};

struct l_array_6 {
  static l_array_6 init(__vec16_i32 v0, __vec16_i32 v1, __vec16_i32 v2, __vec16_i32 v3, __vec16_i32 v4, __vec16_i32 v5, __vec16_i32 v6, __vec16_i32 v7, __vec16_i32 v8, __vec16_i32 v9, __vec16_i32 v10, __vec16_i32 v11, __vec16_i32 v12, __vec16_i32 v13, __vec16_i32 v14, __vec16_i32 v15, __vec16_i32 v16, __vec16_i32 v17, __vec16_i32 v18, __vec16_i32 v19, __vec16_i32 v20, __vec16_i32 v21, __vec16_i32 v22, __vec16_i32 v23, __vec16_i32 v24, __vec16_i32 v25, __vec16_i32 v26, __vec16_i32 v27, __vec16_i32 v28, __vec16_i32 v29, __vec16_i32 v30, __vec16_i32 v31, __vec16_i32 v32, __vec16_i32 v33, __vec16_i32 v34, __vec16_i32 v35, __vec16_i32 v36, __vec16_i32 v37, __vec16_i32 v38, __vec16_i32 v39, __vec16_i32 v40, __vec16_i32 v41, __vec16_i32 v42, __vec16_i32 v43, __vec16_i32 v44, __vec16_i32 v45, __vec16_i32 v46, __vec16_i32 v47, __vec16_i32 v48, __vec16_i32 v49, __vec16_i32 v50, __vec16_i32 v51, __vec16_i32 v52, __vec16_i32 v53, __vec16_i32 v54, __vec16_i32 v55, __vec16_i32 v56, __vec16_i32 v57, __vec16_i32 v58, __vec16_i32 v59, __vec16_i32 v60, __vec16_i32 v61, __vec16_i32 v62, __vec16_i32 v63, __vec16_i32 v64, __vec16_i32 v65, __vec16_i32 v66, __vec16_i32 v67, __vec16_i32 v68, __vec16_i32 v69, __vec16_i32 v70, __vec16_i32 v71, __vec16_i32 v72, __vec16_i32 v73, __vec16_i32 v74, __vec16_i32 v75, __vec16_i32 v76, __vec16_i32 v77, __vec16_i32 v78, __vec16_i32 v79, __vec16_i32 v80, __vec16_i32 v81, __vec16_i32 v82, __vec16_i32 v83, __vec16_i32 v84, __vec16_i32 v85, __vec16_i32 v86, __vec16_i32 v87, __vec16_i32 v88, __vec16_i32 v89, __vec16_i32 v90, __vec16_i32 v91, __vec16_i32 v92, __vec16_i32 v93, __vec16_i32 v94, __vec16_i32 v95, __vec16_i32 v96, __vec16_i32 v97, __vec16_i32 v98, __vec16_i32 v99, __vec16_i32 v100, __vec16_i32 v101, __vec16_i32 v102, __vec16_i32 v103, __vec16_i32 v104, __vec16_i32 v105, __vec16_i32 v106, __vec16_i32 v107, __vec16_i32 v108, __vec16_i32 v109, __vec16_i32 v110, __vec16_i32 v111, __vec16_i32 v112, __vec16_i32 v113, __vec16_i32 v114, __vec16_i32 v115, __vec16_i32 v116, __vec16_i32 v117, __vec16_i32 v118, __vec16_i32 v119, __vec16_i32 v120, __vec16_i32 v121, __vec16_i32 v122, __vec16_i32 v123, __vec16_i32 v124, __vec16_i32 v125, __vec16_i32 v126, __vec16_i32 v127, __vec16_i32 v128, __vec16_i32 v129, __vec16_i32 v130, __vec16_i32 v131, __vec16_i32 v132, __vec16_i32 v133, __vec16_i32 v134, __vec16_i32 v135, __vec16_i32 v136, __vec16_i32 v137, __vec16_i32 v138, __vec16_i32 v139, __vec16_i32 v140, __vec16_i32 v141, __vec16_i32 v142, __vec16_i32 v143, __vec16_i32 v144, __vec16_i32 v145, __vec16_i32 v146, __vec16_i32 v147, __vec16_i32 v148, __vec16_i32 v149, __vec16_i32 v150, __vec16_i32 v151, __vec16_i32 v152, __vec16_i32 v153, __vec16_i32 v154, __vec16_i32 v155, __vec16_i32 v156, __vec16_i32 v157, __vec16_i32 v158, __vec16_i32 v159, __vec16_i32 v160, __vec16_i32 v161, __vec16_i32 v162, __vec16_i32 v163, __vec16_i32 v164, __vec16_i32 v165, __vec16_i32 v166, __vec16_i32 v167, __vec16_i32 v168, __vec16_i32 v169, __vec16_i32 v170, __vec16_i32 v171, __vec16_i32 v172, __vec16_i32 v173, __vec16_i32 v174, __vec16_i32 v175, __vec16_i32 v176, __vec16_i32 v177, __vec16_i32 v178, __vec16_i32 v179, __vec16_i32 v180, __vec16_i32 v181, __vec16_i32 v182, __vec16_i32 v183, __vec16_i32 v184, __vec16_i32 v185, __vec16_i32 v186, __vec16_i32 v187, __vec16_i32 v188, __vec16_i32 v189, __vec16_i32 v190, __vec16_i32 v191, __vec16_i32 v192, __vec16_i32 v193, __vec16_i32 v194, __vec16_i32 v195, __vec16_i32 v196, __vec16_i32 v197, __vec16_i32 v198, __vec16_i32 v199, __vec16_i32 v200, __vec16_i32 v201, __vec16_i32 v202, __vec16_i32 v203, __vec16_i32 v204, __vec16_i32 v205, __vec16_i32 v206, __vec16_i32 v207, __vec16_i32 v208, __vec16_i32 v209, __vec16_i32 v210, __vec16_i32 v211, __vec16_i32 v212, __vec16_i32 v213, __vec16_i32 v214, __vec16_i32 v215, __vec16_i32 v216, __vec16_i32 v217, __vec16_i32 v218, __vec16_i32 v219, __vec16_i32 v220, __vec16_i32 v221, __vec16_i32 v222, __vec16_i32 v223, __vec16_i32 v224, __vec16_i32 v225, __vec16_i32 v226, __vec16_i32 v227, __vec16_i32 v228, __vec16_i32 v229, __vec16_i32 v230, __vec16_i32 v231, __vec16_i32 v232, __vec16_i32 v233, __vec16_i32 v234, __vec16_i32 v235, __vec16_i32 v236, __vec16_i32 v237, __vec16_i32 v238, __vec16_i32 v239, __vec16_i32 v240, __vec16_i32 v241, __vec16_i32 v242, __vec16_i32 v243, __vec16_i32 v244, __vec16_i32 v245, __vec16_i32 v246, __vec16_i32 v247, __vec16_i32 v248, __vec16_i32 v249, __vec16_i32 v250, __vec16_i32 v251, __vec16_i32 v252, __vec16_i32 v253, __vec16_i32 v254, __vec16_i32 v255) {
    l_array_6 ret;
    ret.array[0] = v0;
    ret.array[1] = v1;
    ret.array[2] = v2;
    ret.array[3] = v3;
    ret.array[4] = v4;
    ret.array[5] = v5;
    ret.array[6] = v6;
    ret.array[7] = v7;
    ret.array[8] = v8;
    ret.array[9] = v9;
    ret.array[10] = v10;
    ret.array[11] = v11;
    ret.array[12] = v12;
    ret.array[13] = v13;
    ret.array[14] = v14;
    ret.array[15] = v15;
    ret.array[16] = v16;
    ret.array[17] = v17;
    ret.array[18] = v18;
    ret.array[19] = v19;
    ret.array[20] = v20;
    ret.array[21] = v21;
    ret.array[22] = v22;
    ret.array[23] = v23;
    ret.array[24] = v24;
    ret.array[25] = v25;
    ret.array[26] = v26;
    ret.array[27] = v27;
    ret.array[28] = v28;
    ret.array[29] = v29;
    ret.array[30] = v30;
    ret.array[31] = v31;
    ret.array[32] = v32;
    ret.array[33] = v33;
    ret.array[34] = v34;
    ret.array[35] = v35;
    ret.array[36] = v36;
    ret.array[37] = v37;
    ret.array[38] = v38;
    ret.array[39] = v39;
    ret.array[40] = v40;
    ret.array[41] = v41;
    ret.array[42] = v42;
    ret.array[43] = v43;
    ret.array[44] = v44;
    ret.array[45] = v45;
    ret.array[46] = v46;
    ret.array[47] = v47;
    ret.array[48] = v48;
    ret.array[49] = v49;
    ret.array[50] = v50;
    ret.array[51] = v51;
    ret.array[52] = v52;
    ret.array[53] = v53;
    ret.array[54] = v54;
    ret.array[55] = v55;
    ret.array[56] = v56;
    ret.array[57] = v57;
    ret.array[58] = v58;
    ret.array[59] = v59;
    ret.array[60] = v60;
    ret.array[61] = v61;
    ret.array[62] = v62;
    ret.array[63] = v63;
    ret.array[64] = v64;
    ret.array[65] = v65;
    ret.array[66] = v66;
    ret.array[67] = v67;
    ret.array[68] = v68;
    ret.array[69] = v69;
    ret.array[70] = v70;
    ret.array[71] = v71;
    ret.array[72] = v72;
    ret.array[73] = v73;
    ret.array[74] = v74;
    ret.array[75] = v75;
    ret.array[76] = v76;
    ret.array[77] = v77;
    ret.array[78] = v78;
    ret.array[79] = v79;
    ret.array[80] = v80;
    ret.array[81] = v81;
    ret.array[82] = v82;
    ret.array[83] = v83;
    ret.array[84] = v84;
    ret.array[85] = v85;
    ret.array[86] = v86;
    ret.array[87] = v87;
    ret.array[88] = v88;
    ret.array[89] = v89;
    ret.array[90] = v90;
    ret.array[91] = v91;
    ret.array[92] = v92;
    ret.array[93] = v93;
    ret.array[94] = v94;
    ret.array[95] = v95;
    ret.array[96] = v96;
    ret.array[97] = v97;
    ret.array[98] = v98;
    ret.array[99] = v99;
    ret.array[100] = v100;
    ret.array[101] = v101;
    ret.array[102] = v102;
    ret.array[103] = v103;
    ret.array[104] = v104;
    ret.array[105] = v105;
    ret.array[106] = v106;
    ret.array[107] = v107;
    ret.array[108] = v108;
    ret.array[109] = v109;
    ret.array[110] = v110;
    ret.array[111] = v111;
    ret.array[112] = v112;
    ret.array[113] = v113;
    ret.array[114] = v114;
    ret.array[115] = v115;
    ret.array[116] = v116;
    ret.array[117] = v117;
    ret.array[118] = v118;
    ret.array[119] = v119;
    ret.array[120] = v120;
    ret.array[121] = v121;
    ret.array[122] = v122;
    ret.array[123] = v123;
    ret.array[124] = v124;
    ret.array[125] = v125;
    ret.array[126] = v126;
    ret.array[127] = v127;
    ret.array[128] = v128;
    ret.array[129] = v129;
    ret.array[130] = v130;
    ret.array[131] = v131;
    ret.array[132] = v132;
    ret.array[133] = v133;
    ret.array[134] = v134;
    ret.array[135] = v135;
    ret.array[136] = v136;
    ret.array[137] = v137;
    ret.array[138] = v138;
    ret.array[139] = v139;
    ret.array[140] = v140;
    ret.array[141] = v141;
    ret.array[142] = v142;
    ret.array[143] = v143;
    ret.array[144] = v144;
    ret.array[145] = v145;
    ret.array[146] = v146;
    ret.array[147] = v147;
    ret.array[148] = v148;
    ret.array[149] = v149;
    ret.array[150] = v150;
    ret.array[151] = v151;
    ret.array[152] = v152;
    ret.array[153] = v153;
    ret.array[154] = v154;
    ret.array[155] = v155;
    ret.array[156] = v156;
    ret.array[157] = v157;
    ret.array[158] = v158;
    ret.array[159] = v159;
    ret.array[160] = v160;
    ret.array[161] = v161;
    ret.array[162] = v162;
    ret.array[163] = v163;
    ret.array[164] = v164;
    ret.array[165] = v165;
    ret.array[166] = v166;
    ret.array[167] = v167;
    ret.array[168] = v168;
    ret.array[169] = v169;
    ret.array[170] = v170;
    ret.array[171] = v171;
    ret.array[172] = v172;
    ret.array[173] = v173;
    ret.array[174] = v174;
    ret.array[175] = v175;
    ret.array[176] = v176;
    ret.array[177] = v177;
    ret.array[178] = v178;
    ret.array[179] = v179;
    ret.array[180] = v180;
    ret.array[181] = v181;
    ret.array[182] = v182;
    ret.array[183] = v183;
    ret.array[184] = v184;
    ret.array[185] = v185;
    ret.array[186] = v186;
    ret.array[187] = v187;
    ret.array[188] = v188;
    ret.array[189] = v189;
    ret.array[190] = v190;
    ret.array[191] = v191;
    ret.array[192] = v192;
    ret.array[193] = v193;
    ret.array[194] = v194;
    ret.array[195] = v195;
    ret.array[196] = v196;
    ret.array[197] = v197;
    ret.array[198] = v198;
    ret.array[199] = v199;
    ret.array[200] = v200;
    ret.array[201] = v201;
    ret.array[202] = v202;
    ret.array[203] = v203;
    ret.array[204] = v204;
    ret.array[205] = v205;
    ret.array[206] = v206;
    ret.array[207] = v207;
    ret.array[208] = v208;
    ret.array[209] = v209;
    ret.array[210] = v210;
    ret.array[211] = v211;
    ret.array[212] = v212;
    ret.array[213] = v213;
    ret.array[214] = v214;
    ret.array[215] = v215;
    ret.array[216] = v216;
    ret.array[217] = v217;
    ret.array[218] = v218;
    ret.array[219] = v219;
    ret.array[220] = v220;
    ret.array[221] = v221;
    ret.array[222] = v222;
    ret.array[223] = v223;
    ret.array[224] = v224;
    ret.array[225] = v225;
    ret.array[226] = v226;
    ret.array[227] = v227;
    ret.array[228] = v228;
    ret.array[229] = v229;
    ret.array[230] = v230;
    ret.array[231] = v231;
    ret.array[232] = v232;
    ret.array[233] = v233;
    ret.array[234] = v234;
    ret.array[235] = v235;
    ret.array[236] = v236;
    ret.array[237] = v237;
    ret.array[238] = v238;
    ret.array[239] = v239;
    ret.array[240] = v240;
    ret.array[241] = v241;
    ret.array[242] = v242;
    ret.array[243] = v243;
    ret.array[244] = v244;
    ret.array[245] = v245;
    ret.array[246] = v246;
    ret.array[247] = v247;
    ret.array[248] = v248;
    ret.array[249] = v249;
    ret.array[250] = v250;
    ret.array[251] = v251;
    ret.array[252] = v252;
    ret.array[253] = v253;
    ret.array[254] = v254;
    ret.array[255] = v255;
    return ret;
  }
  __vec16_i32 array[256];
} ;



/* Function Declarations */
extern "C" {
uint64_t sysconf(uint32_t );
uint8_t *ISPCAlloc(uint8_t **, uint64_t , uint32_t );
void ISPCLaunch(uint8_t **, uint8_t *, uint8_t *, uint32_t );
void ISPCSync(uint8_t *);
void histogram___uniuniun_3C_unI_3E_uniun_3C_uni_3E_(l_unnamed_0 *, uint32_t , uint32_t , uint32_t , uint32_t );
void permutation___uniuniun_3C_unI_3E_uniun_3C_uni_3E_un_3C_unI_3E_(l_unnamed_1 *, uint32_t , uint32_t , uint32_t , uint32_t );
void copy___uniuniun_3C_unI_3E_un_3C_unI_3E_(l_unnamed_2 *, uint32_t , uint32_t , uint32_t , uint32_t );
void pack___uniuniun_3C_unu_3E_un_3C_unI_3E_(l_unnamed_3 *, uint32_t , uint32_t , uint32_t , uint32_t );
void unpack___uniuniun_3C_unI_3E_un_3C_unu_3E_un_3C_uni_3E_(l_unnamed_4 *, uint32_t , uint32_t , uint32_t , uint32_t );
void addup___un_3C_uni_3E_un_3C_uni_3E_(l_unnamed_5 *, uint32_t , uint32_t , uint32_t , uint32_t );
void bumpup___un_3C_uni_3E_un_3C_uni_3E_(l_unnamed_5 *, uint32_t , uint32_t , uint32_t , uint32_t );
static void prefix_sum___uniun_3C_uni_3E_(uint32_t num_, uint32_t *h_, __vec16_i1 __mask_);
void sort_ispc___uniun_3C_unu_3E_un_3C_uni_3E_uni(uint32_t n_, uint32_t *code_, uint32_t *order_, uint32_t ntasks_, __vec16_i1 __mask_);
void sort_ispc(uint32_t n_, uint32_t *code_, uint32_t *order_, uint32_t ntasks_);
}



/* Function Bodies */
template <typename A, typename B> static inline int llvm_fcmp_ord(A X, B Y) { return X == X && Y == Y; }
template <typename A, typename B> static inline int llvm_fcmp_uno(A X, B Y) { return X != X || Y != Y; }
template <typename A, typename B> static inline int llvm_fcmp_ueq(A X, B Y) { return X == Y || llvm_fcmp_uno(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_une(A X, B Y) { return X != Y; }
template <typename A, typename B> static inline int llvm_fcmp_ult(A X, B Y) { return X <  Y || llvm_fcmp_uno(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_ugt(A X, B Y) { return X >  Y || llvm_fcmp_uno(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_ule(A X, B Y) { return X <= Y || llvm_fcmp_uno(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_uge(A X, B Y) { return X >= Y || llvm_fcmp_uno(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_oeq(A X, B Y) { return X == Y ; }
template <typename A, typename B> static inline int llvm_fcmp_one(A X, B Y) { return X != Y && llvm_fcmp_ord(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_olt(A X, B Y) { return X <  Y ; }
template <typename A, typename B> static inline int llvm_fcmp_ogt(A X, B Y) { return X >  Y ; }
template <typename A, typename B> static inline int llvm_fcmp_ole(A X, B Y) { return X <= Y ; }
template <typename A, typename B> static inline int llvm_fcmp_oge(A X, B Y) { return X >= Y ; }
template <typename A> A *Memset(A *ptr, int count, size_t len) { return (A *)memset(ptr, count, len); }

static const int32_t __attribute__ ((aligned(64))) VectorConstant0[] = { 0u, 1u, 2u, 3u, 4u, 5u, 6u, 7u, 8u, 9u, 10u, 11u, 12u, 13u, 14u, 15u,  };
static const int32_t __attribute__ ((aligned(64))) VectorConstant1[] = { 1u, 2u, 3u, 4u, 5u, 6u, 7u, 8u, 9u, 10u, 11u, 12u, 13u, 14u, 15u, 16u,  };
static const int64_t __attribute__ ((aligned(64))) VectorConstant2[] = { 0ull, 4ull, 8ull, 12ull, 16ull, 20ull, 24ull, 28ull, 32ull, 36ull, 40ull, 44ull, 48ull, 52ull, 56ull, 60ull,  };
static const int64_t __attribute__ ((aligned(64))) VectorConstant3[] = { 0ull, 4ull, 8ull, 12ull, 16ull, 20ull, 24ull, 28ull, 32ull, 36ull, 40ull, 44ull, 48ull, 52ull, 56ull, 60ull,  };
static const int64_t __attribute__ ((aligned(64))) VectorConstant4[] = { 0ull, 4ull, 8ull, 12ull, 16ull, 20ull, 24ull, 28ull, 32ull, 36ull, 40ull, 44ull, 48ull, 52ull, 56ull, 60ull,  };
static const int64_t __attribute__ ((aligned(64))) VectorConstant5[] = { 0ull, 4ull, 8ull, 12ull, 16ull, 20ull, 24ull, 28ull, 32ull, 36ull, 40ull, 44ull, 48ull, 52ull, 56ull, 60ull,  };

void histogram___uniuniun_3C_unI_3E_uniun_3C_uni_3E_(l_unnamed_0 *tmp__1_, uint32_t tmp__2_, uint32_t tmp__3_, uint32_t tmp__4_, uint32_t tmp__5_) {
  l_array_6 g_;    /* Address-exposed local */
  uint32_t span2_;
  uint64_t *code6_;
  uint32_t pass8_;
  uint32_t *hist10_;
  __vec16_i1 mask_;
  uint32_t mul_taskIndex_load_span_load_;
  uint32_t n4_;
  uint32_t add_start_load_span_load12_;
  uint32_t select_;
  uint32_t select___PHI;
  uint32_t sub_end_load_start_load13_;
  uint32_t div_sub_end_load_start_load13__;
  uint32_t mod_sub_end_load14_start_load15__;
  uint32_t mul__taskIndex_load16_;
  bool internal_mask_26_function_mask22_any502_;
  uint8_t *gep_ptr2int_2void_;
  __vec16_i32 storemerge_;
  __vec16_i32 storemerge___PHI;
  __vec16_i1 internal_mask_memory_2e_1_;
  __vec16_i1 internal_mask_memory_2e_1___PHI;
  uint32_t j_load48_plus1_2e_elt0_;
  __vec16_i32 j_load48_plus1_;
  __vec16_i1 oldMask_26_test_and_mask_;
  bool internal_mask_26_function_mask22_any_;
  __vec16_i1 oldMask_26_test506_;
  __vec16_i1 oldMask_26_test506___PHI;
  __vec16_i32 storemerge306505_;
  __vec16_i32 storemerge306505___PHI;
  uint32_t storemerge306_2e_elt0504_;
  uint32_t storemerge306_2e_elt0504___PHI;
  __vec16_i1 internal_mask_26_function_mask26_;
  bool internal_mask_26_function_mask26_all_;
  __vec16_i32 (*ptrcast_);
  __vec16_i32 mul_taskIndex_load_span_load_smear_;
  __vec16_i32 div_sub_end_load_start_load13__smear_;
  __vec16_i32 add_start_load58_broadcast_mul__strip_load_broadcast_;
  __vec16_i32 add_start_load59_broadcast_mul__strip_load60_broadcast_;
  __vec16_i1 less_k_load_add_start_load59_broadcast_mul__strip_load60_broadcast497_;
  __vec16_i1 internal_mask_26_function_mask66498_and_mask_;
  bool internal_mask_26_function_mask66_any499_;
  __vec16_i32 pass8_smear_;
  uint8_t *code_load_ptr2int_2void_;
  uint8_t *gep94_ptr2int_2void_;
  __vec16_i32 v_2e_i_;
  __vec16_i32 v1_2e_i_;
  __vec16_i1 internal_mask_memory_2e_3_;
  __vec16_i1 internal_mask_memory_2e_3___PHI;
  __vec16_i32 k_load144_plus1_;
  __vec16_i1 oldMask_26_test62_and_mask_;
  bool internal_mask_26_function_mask66_any_;
  __vec16_i1 oldMask_26_test62501_;
  __vec16_i1 oldMask_26_test62501___PHI;
  __vec16_i32 storemerge303500_;
  __vec16_i32 storemerge303500___PHI;
  __vec16_i1 internal_mask_26_function_mask72_;
  bool internal_mask_26_function_mask72_all_;
  __vec16_i32 new_offsets313_;
  bool internal_mask_26_function_mask155_any_;
  __vec16_i8 c_load_offset_load315_;
  __vec16_i8 c_load87_offset_load401_;
  __vec16_i32 gep94_offset_offset_load320_;
  __vec16_i8 c_load110_offset_load333_;
  __vec16_i8 c_load122_offset_load412_;
  __vec16_i32 gep129_offset_offset_load338_;
  uint32_t add_start_load164_mul__strip_load165_;
  __vec16_i32 add_start_load164_mul__strip_load165_smear_;
  __vec16_i32 add_add_start_load167_mul__strip_load168_tail_load_smear_;
  __vec16_i1 oldMask_26_test170490_and_mask_;
  bool internal_mask_26_function_mask174_any492_;
  uint8_t *code_load179_ptr2int_2void_;
  bool internal_mask_26_function_mask244_any482_;
  uint32_t mul_j_load255__2e_elt0_;
  uint8_t *gep258_ptr2int_2void_;
  uint8_t *hist_load_ptr2int_2void_;
  __vec16_i1 oldMask_26_test170496_;
  __vec16_i1 oldMask_26_test170496___PHI;
  __vec16_i32 storemerge300495_;
  __vec16_i32 storemerge300495___PHI;
  uint32_t storemerge300_2e_elt0494_;
  uint32_t storemerge300_2e_elt0494___PHI;
  uint8_t c_load181_offset_load351420_;
  __vec16_i1 internal_mask_26_function_mask206_;
  __vec16_i32 ptr439_masked_load_;
  __vec16_i32 (*ptr441469_);
  __vec16_i32 v_2e_i480_;
  __vec16_i32 v1_2e_i481_;
  __vec16_i32 k_load215_plus1_;
  __vec16_i1 oldMask_26_test170_and_mask_;
  bool internal_mask_26_function_mask174_any_;
  __vec16_i1 internal_mask_memory_2e_6_;
  __vec16_i1 internal_mask_memory_2e_6___PHI;
  uint32_t j_load292_plus1_2e_elt0_;
  __vec16_i32 j_load292_plus1_;
  __vec16_i1 oldMask_26_test240_and_mask_;
  bool internal_mask_26_function_mask244_any_;
  __vec16_i1 oldMask_26_test240488_;
  __vec16_i1 oldMask_26_test240488___PHI;
  __vec16_i32 storemerge487_;
  __vec16_i32 storemerge487___PHI;
  uint32_t storemerge_2e_elt0486_;
  uint32_t storemerge_2e_elt0486___PHI;
  __vec16_i1 internal_mask_26_function_mask250_;
  bool internal_mask_26_function_mask250_all_;
  uint32_t add_mul_mul_j_load255__taskCount_load256_broadcast_i_load_2e_elt0_;
  uint8_t *ptr444_;
  __vec16_i32 ptr444_masked_load445_;
  __vec16_i32 ptr456_masked_load_;

  span2_ = *((&tmp__1_->field0));
  code6_ = *((&tmp__1_->field2));
  pass8_ = *((&tmp__1_->field3));
  hist10_ = *((&tmp__1_->field4));
  mask_ = __load<2>(((&tmp__1_->field5)));
  mul_taskIndex_load_span_load_ = ((uint32_t )(((uint32_t )span2_) * ((uint32_t )tmp__4_)));
  if (((((uint32_t )(((uint32_t )tmp__5_) + ((uint32_t )4294967295u)))) == tmp__4_)) {
    goto select_true_label;
  } else {
    goto select_false_label;
  }

select_true_label: {
  n4_ = *((&tmp__1_->field1));
  select___PHI = n4_;   /* for PHI node */
  goto select_done_label;

}
select_false_label: {
  add_start_load_span_load12_ = ((uint32_t )(((uint32_t )mul_taskIndex_load_span_load_) + ((uint32_t )span2_)));
  select___PHI = add_start_load_span_load12_;   /* for PHI node */
  goto select_done_label;

}
select_done_label: {
  select_ = select___PHI;
  sub_end_load_start_load13_ = ((uint32_t )(((uint32_t )select_) - ((uint32_t )mul_taskIndex_load_span_load_)));
  div_sub_end_load_start_load13__ = ((int32_t )(((int32_t )sub_end_load_start_load13_) / ((int32_t )16u)));
  mod_sub_end_load14_start_load15__ = ((int32_t )(((int32_t )sub_end_load_start_load13_) % ((int32_t )16u)));
  mul__taskIndex_load16_ = tmp__4_ << 4u;
  internal_mask_26_function_mask22_any502_ = ((__any(mask_))&1);
  if (internal_mask_26_function_mask22_any502_) {
    goto for_loop_2e_lr_2e_ph_label;
  } else {
    goto for_exit_label;
  }

}
for_loop_2e_lr_2e_ph_label: {
  gep_ptr2int_2void_ = ((uint8_t *)(&g_));
  oldMask_26_test506___PHI = __smear_i1<__vec16_i1>(1);   /* for PHI node */
  storemerge306505___PHI = __setzero_i32<__vec16_i32>();   /* for PHI node */
  storemerge306_2e_elt0504___PHI = 0u;   /* for PHI node */
  goto for_loop_label;

}
  do {     /* Syntactic loop 'for_loop' to make GCC happy */
for_loop_label: {
  oldMask_26_test506_ = oldMask_26_test506___PHI;
  storemerge306505_ = storemerge306505___PHI;
  storemerge306_2e_elt0504_ = storemerge306_2e_elt0504___PHI;
  internal_mask_26_function_mask26_ = __and(oldMask_26_test506_, mask_);
  internal_mask_26_function_mask26_all_ = ((__all(internal_mask_26_function_mask26_))&1);
  ptrcast_ = ((__vec16_i32 (*))((&gep_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )(storemerge306_2e_elt0504_ << 6u))))])));
  if (internal_mask_26_function_mask26_all_) {
    storemerge___PHI = __setzero_i32<__vec16_i32>();   /* for PHI node */
    internal_mask_memory_2e_1___PHI = __smear_i1<__vec16_i1>(1);   /* for PHI node */
    goto for_step_label;
  } else {
    goto for_mixed_label;
  }

}
for_mixed_label: {
  v_2e_i_ = __load<64>(ptrcast_);
  v1_2e_i_ = __select(internal_mask_26_function_mask26_, __setzero_i32<__vec16_i32>(), v_2e_i_);
  storemerge___PHI = v1_2e_i_;   /* for PHI node */
  internal_mask_memory_2e_1___PHI = oldMask_26_test506_;   /* for PHI node */
  goto for_step_label;

}
for_step_label: {
  storemerge_ = storemerge___PHI;
  internal_mask_memory_2e_1_ = internal_mask_memory_2e_1___PHI;
  __store<64>(ptrcast_, storemerge_);
  j_load48_plus1_2e_elt0_ = ((uint32_t )(((uint32_t )storemerge306_2e_elt0504_) + ((uint32_t )1u)));
  j_load48_plus1_ = __add(storemerge306505_, __smear_i32<__vec16_i32>(1u));
  oldMask_26_test_and_mask_ = __signed_less_than_i32_and_mask(j_load48_plus1_, __smear_i32<__vec16_i32>(256u), internal_mask_memory_2e_1_);
  internal_mask_26_function_mask22_any_ = ((__any((__and(oldMask_26_test_and_mask_, mask_))))&1);
  if (internal_mask_26_function_mask22_any_) {
    oldMask_26_test506___PHI = oldMask_26_test_and_mask_;   /* for PHI node */
    storemerge306505___PHI = j_load48_plus1_;   /* for PHI node */
    storemerge306_2e_elt0504___PHI = j_load48_plus1_2e_elt0_;   /* for PHI node */
    goto for_loop_label;
  } else {
    goto for_exit_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop' */
for_exit_label: {
  mul_taskIndex_load_span_load_smear_ = __smear_i32<__vec16_i32>(mul_taskIndex_load_span_load_);
  div_sub_end_load_start_load13__smear_ = __smear_i32<__vec16_i32>(div_sub_end_load_start_load13__);
  add_start_load58_broadcast_mul__strip_load_broadcast_ = __add(mul_taskIndex_load_span_load_smear_, (__mul(div_sub_end_load_start_load13__smear_, __load<64>((const __vec16_i32  *)(VectorConstant0)))));
  add_start_load59_broadcast_mul__strip_load60_broadcast_ = __add(mul_taskIndex_load_span_load_smear_, (__mul(div_sub_end_load_start_load13__smear_, __load<64>((const __vec16_i32  *)(VectorConstant1)))));
  less_k_load_add_start_load59_broadcast_mul__strip_load60_broadcast497_ = __signed_less_than_i32(add_start_load58_broadcast_mul__strip_load_broadcast_, add_start_load59_broadcast_mul__strip_load60_broadcast_);
  internal_mask_26_function_mask66498_and_mask_ = __signed_less_than_i32_and_mask(add_start_load58_broadcast_mul__strip_load_broadcast_, add_start_load59_broadcast_mul__strip_load60_broadcast_, mask_);
  internal_mask_26_function_mask66_any499_ = ((__any(internal_mask_26_function_mask66498_and_mask_))&1);
  if (internal_mask_26_function_mask66_any499_) {
    goto for_loop53_2e_lr_2e_ph_label;
  } else {
    goto for_exit54_label;
  }

}
for_loop53_2e_lr_2e_ph_label: {
  pass8_smear_ = __smear_i32<__vec16_i32>(pass8_);
  code_load_ptr2int_2void_ = ((uint8_t *)code6_);
  gep94_ptr2int_2void_ = ((uint8_t *)(&g_));
  oldMask_26_test62501___PHI = less_k_load_add_start_load59_broadcast_mul__strip_load60_broadcast497_;   /* for PHI node */
  storemerge303500___PHI = add_start_load58_broadcast_mul__strip_load_broadcast_;   /* for PHI node */
  goto for_loop53_label;

}
  do {     /* Syntactic loop 'for_loop53' to make GCC happy */
for_loop53_label: {
  oldMask_26_test62501_ = oldMask_26_test62501___PHI;
  storemerge303500_ = storemerge303500___PHI;
  internal_mask_26_function_mask72_ = __and(oldMask_26_test62501_, mask_);
  internal_mask_26_function_mask72_all_ = ((__all(internal_mask_26_function_mask72_))&1);
  new_offsets313_ = __add((__mul(storemerge303500_, __smear_i32<__vec16_i32>(8u))), pass8_smear_);
  if (internal_mask_26_function_mask72_all_) {
    goto for_all_on69_label;
  } else {
    goto for_mixed70_label;
  }

}
for_mixed70_label: {
  c_load110_offset_load333_ = __gather_base_offsets32_i8(code_load_ptr2int_2void_, 1u, new_offsets313_, internal_mask_26_function_mask72_);
  c_load122_offset_load412_ = __gather_base_offsets32_i8(code_load_ptr2int_2void_, 1u, new_offsets313_, internal_mask_26_function_mask72_);
  gep129_offset_offset_load338_ = __gather_base_offsets64_i32(gep94_ptr2int_2void_, 1u, (__add((__mul(((__cast_zext(__vec16_i64 (), c_load122_offset_load412_))), __smear_i64<__vec16_i64>(64ull))), __load<64>((const __vec16_i64  *)(VectorConstant5)))), internal_mask_26_function_mask72_);
  __scatter_base_offsets64_i32(gep94_ptr2int_2void_, 1u, (__add((__mul(((__cast_zext(__vec16_i64 (), c_load110_offset_load333_))), __smear_i64<__vec16_i64>(64ull))), __load<64>((const __vec16_i64  *)(VectorConstant5)))), (__add(gep129_offset_offset_load338_, __smear_i32<__vec16_i32>(1u))), internal_mask_26_function_mask72_);
  internal_mask_memory_2e_3___PHI = oldMask_26_test62501_;   /* for PHI node */
  goto for_step52_label;

}
for_all_on69_label: {
  c_load_offset_load315_ = __gather_base_offsets32_i8(code_load_ptr2int_2void_, 1u, new_offsets313_, __smear_i1<__vec16_i1>(1));
  c_load87_offset_load401_ = __gather_base_offsets32_i8(code_load_ptr2int_2void_, 1u, new_offsets313_, __smear_i1<__vec16_i1>(1));
  gep94_offset_offset_load320_ = __gather_base_offsets64_i32(gep94_ptr2int_2void_, 1u, (__add((__mul(((__cast_zext(__vec16_i64 (), c_load87_offset_load401_))), __smear_i64<__vec16_i64>(64ull))), __load<64>((const __vec16_i64  *)(VectorConstant5)))), __smear_i1<__vec16_i1>(1));
  __scatter_base_offsets64_i32(gep94_ptr2int_2void_, 1u, (__add((__mul(((__cast_zext(__vec16_i64 (), c_load_offset_load315_))), __smear_i64<__vec16_i64>(64ull))), __load<64>((const __vec16_i64  *)(VectorConstant5)))), (__add(gep94_offset_offset_load320_, __smear_i32<__vec16_i32>(1u))), __smear_i1<__vec16_i1>(1));
  internal_mask_memory_2e_3___PHI = __smear_i1<__vec16_i1>(1);   /* for PHI node */
  goto for_step52_label;

}
for_step52_label: {
  internal_mask_memory_2e_3_ = internal_mask_memory_2e_3___PHI;
  k_load144_plus1_ = __add(storemerge303500_, __smear_i32<__vec16_i32>(1u));
  oldMask_26_test62_and_mask_ = __signed_less_than_i32_and_mask(k_load144_plus1_, add_start_load59_broadcast_mul__strip_load60_broadcast_, internal_mask_memory_2e_3_);
  internal_mask_26_function_mask66_any_ = ((__any((__and(oldMask_26_test62_and_mask_, mask_))))&1);
  if (internal_mask_26_function_mask66_any_) {
    oldMask_26_test62501___PHI = oldMask_26_test62_and_mask_;   /* for PHI node */
    storemerge303500___PHI = k_load144_plus1_;   /* for PHI node */
    goto for_loop53_label;
  } else {
    goto for_exit54_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop53' */
for_exit54_label: {
  internal_mask_26_function_mask155_any_ = ((__any((__and(mask_, __vec16_i1 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)))))&1);
  if (internal_mask_26_function_mask155_any_) {
    goto safe_if_run_true_label;
  } else {
    goto for_test230_2e_preheader_label;
  }

}
safe_if_run_true_label: {
  add_start_load164_mul__strip_load165_ = ((uint32_t )(((uint32_t )(div_sub_end_load_start_load13__ << 4u)) + ((uint32_t )mul_taskIndex_load_span_load_)));
  add_start_load164_mul__strip_load165_smear_ = __smear_i32<__vec16_i32>(add_start_load164_mul__strip_load165_);
  add_add_start_load167_mul__strip_load168_tail_load_smear_ = __smear_i32<__vec16_i32>((((uint32_t )(((uint32_t )add_start_load164_mul__strip_load165_) + ((uint32_t )mod_sub_end_load14_start_load15__)))));
  oldMask_26_test170490_and_mask_ = __signed_less_than_i32_and_mask(add_start_load164_mul__strip_load165_smear_, add_add_start_load167_mul__strip_load168_tail_load_smear_, __vec16_i1 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1));
  internal_mask_26_function_mask174_any492_ = ((__any((__and(oldMask_26_test170490_and_mask_, mask_))))&1);
  if (internal_mask_26_function_mask174_any492_) {
    goto for_loop158_2e_lr_2e_ph_label;
  } else {
    goto for_test230_2e_preheader_label;
  }

}
for_loop158_2e_lr_2e_ph_label: {
  code_load179_ptr2int_2void_ = ((uint8_t *)code6_);
  oldMask_26_test170496___PHI = oldMask_26_test170490_and_mask_;   /* for PHI node */
  storemerge300495___PHI = add_start_load164_mul__strip_load165_smear_;   /* for PHI node */
  storemerge300_2e_elt0494___PHI = add_start_load164_mul__strip_load165_;   /* for PHI node */
  goto for_loop158_label;

}
for_test230_2e_preheader_label: {
  internal_mask_26_function_mask244_any482_ = ((__any(mask_))&1);
  if (internal_mask_26_function_mask244_any482_) {
    goto for_loop232_2e_lr_2e_ph_label;
  } else {
    goto for_exit233_label;
  }

}
for_loop232_2e_lr_2e_ph_label: {
  mul_j_load255__2e_elt0_ = tmp__5_ << 4u;
  gep258_ptr2int_2void_ = ((uint8_t *)(&g_));
  hist_load_ptr2int_2void_ = ((uint8_t *)hist10_);
  oldMask_26_test240488___PHI = __smear_i1<__vec16_i1>(1);   /* for PHI node */
  storemerge487___PHI = __setzero_i32<__vec16_i32>();   /* for PHI node */
  storemerge_2e_elt0486___PHI = 0u;   /* for PHI node */
  goto for_loop232_label;

}
  do {     /* Syntactic loop 'for_loop158' to make GCC happy */
for_loop158_label: {
  oldMask_26_test170496_ = oldMask_26_test170496___PHI;
  storemerge300495_ = storemerge300495___PHI;
  storemerge300_2e_elt0494_ = storemerge300_2e_elt0494___PHI;
  c_load181_offset_load351420_ = *((&code_load179_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )(((uint32_t )(((uint32_t )(storemerge300_2e_elt0494_ << 3u)) + ((uint32_t )pass8_)))))))]));
  internal_mask_26_function_mask206_ = __and(oldMask_26_test170496_, mask_);
  ptr439_masked_load_ = __masked_load_i32((((uint8_t *)((&g_.array[((int64_t )(((uint64_t )(uint8_t )c_load181_offset_load351420_)))])))), internal_mask_26_function_mask206_);
  ptr441469_ = (&g_.array[((int64_t )(((uint64_t )(uint8_t )c_load181_offset_load351420_)))]);
  v_2e_i480_ = __load<64>(ptr441469_);
  v1_2e_i481_ = __select(internal_mask_26_function_mask206_, (__add(ptr439_masked_load_, __smear_i32<__vec16_i32>(1u))), v_2e_i480_);
  __store<64>(ptr441469_, v1_2e_i481_);
  k_load215_plus1_ = __add(storemerge300495_, __smear_i32<__vec16_i32>(1u));
  oldMask_26_test170_and_mask_ = __signed_less_than_i32_and_mask(k_load215_plus1_, add_add_start_load167_mul__strip_load168_tail_load_smear_, oldMask_26_test170496_);
  internal_mask_26_function_mask174_any_ = ((__any((__and(oldMask_26_test170_and_mask_, mask_))))&1);
  if (internal_mask_26_function_mask174_any_) {
    oldMask_26_test170496___PHI = oldMask_26_test170_and_mask_;   /* for PHI node */
    storemerge300495___PHI = k_load215_plus1_;   /* for PHI node */
    storemerge300_2e_elt0494___PHI = (((uint32_t )(((uint32_t )storemerge300_2e_elt0494_) + ((uint32_t )1u))));   /* for PHI node */
    goto for_loop158_label;
  } else {
    goto for_test230_2e_preheader_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop158' */
  do {     /* Syntactic loop 'for_loop232' to make GCC happy */
for_loop232_label: {
  oldMask_26_test240488_ = oldMask_26_test240488___PHI;
  storemerge487_ = storemerge487___PHI;
  storemerge_2e_elt0486_ = storemerge_2e_elt0486___PHI;
  internal_mask_26_function_mask250_ = __and(oldMask_26_test240488_, mask_);
  internal_mask_26_function_mask250_all_ = ((__all(internal_mask_26_function_mask250_))&1);
  add_mul_mul_j_load255__taskCount_load256_broadcast_i_load_2e_elt0_ = ((uint32_t )(((uint32_t )(((uint32_t )(((uint32_t )mul_j_load255__2e_elt0_) * ((uint32_t )storemerge_2e_elt0486_))))) + ((uint32_t )mul__taskIndex_load16_)));
  ptr444_ = (&gep258_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )(storemerge_2e_elt0486_ << 6u))))]);
  if (internal_mask_26_function_mask250_all_) {
    goto for_all_on247_label;
  } else {
    goto for_mixed248_label;
  }

}
for_mixed248_label: {
  ptr456_masked_load_ = __masked_load_i32(ptr444_, internal_mask_26_function_mask250_);
  __masked_store_i32((((__vec16_i32 (*))((&hist_load_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )(add_mul_mul_j_load255__taskCount_load256_broadcast_i_load_2e_elt0_ << 2u))))])))), ptr456_masked_load_, internal_mask_26_function_mask250_);
  internal_mask_memory_2e_6___PHI = oldMask_26_test240488_;   /* for PHI node */
  goto for_step231_label;

}
for_all_on247_label: {
  ptr444_masked_load445_ = __load<64>((((__vec16_i32 (*))ptr444_)));
  __store<4>((((__vec16_i32 (*))((&hist_load_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )(add_mul_mul_j_load255__taskCount_load256_broadcast_i_load_2e_elt0_ << 2u))))])))), ptr444_masked_load445_);
  internal_mask_memory_2e_6___PHI = __smear_i1<__vec16_i1>(1);   /* for PHI node */
  goto for_step231_label;

}
for_step231_label: {
  internal_mask_memory_2e_6_ = internal_mask_memory_2e_6___PHI;
  j_load292_plus1_2e_elt0_ = ((uint32_t )(((uint32_t )storemerge_2e_elt0486_) + ((uint32_t )1u)));
  j_load292_plus1_ = __add(storemerge487_, __smear_i32<__vec16_i32>(1u));
  oldMask_26_test240_and_mask_ = __signed_less_than_i32_and_mask(j_load292_plus1_, __smear_i32<__vec16_i32>(256u), internal_mask_memory_2e_6_);
  internal_mask_26_function_mask244_any_ = ((__any((__and(oldMask_26_test240_and_mask_, mask_))))&1);
  if (internal_mask_26_function_mask244_any_) {
    oldMask_26_test240488___PHI = oldMask_26_test240_and_mask_;   /* for PHI node */
    storemerge487___PHI = j_load292_plus1_;   /* for PHI node */
    storemerge_2e_elt0486___PHI = j_load292_plus1_2e_elt0_;   /* for PHI node */
    goto for_loop232_label;
  } else {
    goto for_exit233_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop232' */
for_exit233_label: {
  return;
}
}


static const int32_t __attribute__ ((aligned(64))) VectorConstant6[] = { 0u, 1u, 2u, 3u, 4u, 5u, 6u, 7u, 8u, 9u, 10u, 11u, 12u, 13u, 14u, 15u,  };
static const int32_t __attribute__ ((aligned(64))) VectorConstant7[] = { 1u, 2u, 3u, 4u, 5u, 6u, 7u, 8u, 9u, 10u, 11u, 12u, 13u, 14u, 15u, 16u,  };
static const int64_t __attribute__ ((aligned(64))) VectorConstant8[] = { 0ull, 4ull, 8ull, 12ull, 16ull, 20ull, 24ull, 28ull, 32ull, 36ull, 40ull, 44ull, 48ull, 52ull, 56ull, 60ull,  };
static const int64_t __attribute__ ((aligned(64))) VectorConstant9[] = { 0ull, 4ull, 8ull, 12ull, 16ull, 20ull, 24ull, 28ull, 32ull, 36ull, 40ull, 44ull, 48ull, 52ull, 56ull, 60ull,  };
static const int64_t __attribute__ ((aligned(64))) VectorConstant10[] = { 0ull, 4ull, 8ull, 12ull, 16ull, 20ull, 24ull, 28ull, 32ull, 36ull, 40ull, 44ull, 48ull, 52ull, 56ull, 60ull,  };
static const int64_t __attribute__ ((aligned(64))) VectorConstant11[] = { 0ull, 4ull, 8ull, 12ull, 16ull, 20ull, 24ull, 28ull, 32ull, 36ull, 40ull, 44ull, 48ull, 52ull, 56ull, 60ull,  };

void permutation___uniuniun_3C_unI_3E_uniun_3C_uni_3E_un_3C_unI_3E_(l_unnamed_1 *tmp__6_, uint32_t tmp__7_, uint32_t tmp__8_, uint32_t tmp__9_, uint32_t tmp__10_) {
  l_array_6 g_;    /* Address-exposed local */
  uint32_t span2_;
  uint64_t *code6_;
  uint32_t pass8_;
  uint32_t *hist10_;
  uint64_t *perm12_;
  __vec16_i1 mask_;
  uint32_t mul_taskIndex_load_span_load_;
  uint32_t n4_;
  uint32_t add_start_load_span_load14_;
  uint32_t select_;
  uint32_t select___PHI;
  uint32_t sub_end_load_start_load15_;
  uint32_t div_sub_end_load_start_load15__;
  uint32_t mod_sub_end_load16_start_load17__;
  uint32_t mul__taskIndex_load18_;
  bool internal_mask_26_function_mask24_any529_;
  uint32_t mul_j_load34__2e_elt0_;
  uint8_t *hist_load_ptr2int_2void_;
  uint8_t *gep_ptr2int_2void_;
  __vec16_i1 internal_mask_memory_2e_1_;
  __vec16_i1 internal_mask_memory_2e_1___PHI;
  uint32_t j_load64_plus1_2e_elt0_;
  __vec16_i32 j_load64_plus1_;
  __vec16_i1 oldMask_26_test_and_mask_;
  bool internal_mask_26_function_mask24_any_;
  __vec16_i1 oldMask_26_test535_;
  __vec16_i1 oldMask_26_test535___PHI;
  __vec16_i32 storemerge292534_;
  __vec16_i32 storemerge292534___PHI;
  uint32_t storemerge292_2e_elt0533_;
  uint32_t storemerge292_2e_elt0533___PHI;
  __vec16_i1 internal_mask_26_function_mask28_;
  bool internal_mask_26_function_mask28_all_;
  uint32_t mul_sizeof_int_broadcast_j_load33_2e_elt0_;
  uint8_t *ptr_;
  __vec16_i32 mul_taskIndex_load_span_load_smear_;
  __vec16_i32 div_sub_end_load_start_load15__smear_;
  __vec16_i32 add_start_load74_broadcast_mul__strip_load_broadcast_;
  __vec16_i32 add_start_load75_broadcast_mul__strip_load76_broadcast_;
  __vec16_i1 less_k_load_add_start_load75_broadcast_mul__strip_load76_broadcast524_;
  __vec16_i1 internal_mask_26_function_mask82525_and_mask_;
  bool internal_mask_26_function_mask82_any526_;
  __vec16_i32 pass8_smear_;
  uint8_t *code_load_ptr2int_2void_;
  uint8_t *gep98_ptr2int_2void_;
  uint8_t *perm_load_ptr2int_2void_;
  __vec16_i32 ptr_masked_load407_;
  __vec16_i32 ptr419_masked_load_;
  __vec16_i32 (*ptrcast425_);
  __vec16_i32 v_2e_i_;
  __vec16_i32 v1_2e_i_;
  __vec16_i1 internal_mask_memory_2e_3_;
  __vec16_i1 internal_mask_memory_2e_3___PHI;
  __vec16_i32 k_load185_plus1_;
  __vec16_i1 oldMask_26_test78_and_mask_;
  bool internal_mask_26_function_mask82_any_;
  __vec16_i1 oldMask_26_test78528_;
  __vec16_i1 oldMask_26_test78528___PHI;
  __vec16_i32 storemerge289527_;
  __vec16_i32 storemerge289527___PHI;
  __vec16_i1 internal_mask_26_function_mask88_;
  bool internal_mask_26_function_mask88_all_;
  __vec16_i32 new_offsets307_;
  bool internal_mask_26_function_mask196_any_;
  __vec16_i8 c_load_offset_load309_;
  __vec16_i32 gep98_offset_offset_load314_;
  __vec16_i64 code_load106_offset_load319_;
  __vec16_i8 c_load116_offset_load433_;
  __vec16_i8 c_load138_offset_load341_;
  __vec16_i32 gep145_offset_offset_load346_;
  __vec16_i64 code_load155_offset_load351_;
  __vec16_i8 c_load165_offset_load449_;
  uint32_t add_start_load205_mul__strip_load206_;
  __vec16_i32 add_start_load205_mul__strip_load206_smear_;
  __vec16_i32 add_add_start_load208_mul__strip_load209_tail_load_smear_;
  __vec16_i1 oldMask_26_test211516_and_mask_;
  bool internal_mask_26_function_mask215_any518_;
  uint8_t *code_load220_ptr2int_2void_;
  uint8_t *perm_load238_ptr2int_2void_;
  __vec16_i1 oldMask_26_test211523_;
  __vec16_i1 oldMask_26_test211523___PHI;
  __vec16_i32 storemerge522_;
  __vec16_i32 storemerge522___PHI;
  uint32_t storemerge_2e_elt0521_;
  uint32_t storemerge_2e_elt0521___PHI;
  uint32_t mul__k_load219_2e_elt0_;
  uint8_t *ptr457_;
  uint8_t c_load223_offset_load373459_;
  __vec16_i1 internal_mask_26_function_mask236_;
  __vec16_i32 ptr463_masked_load_;
  uint64_t code_load240_offset_load383469_;
  __vec16_i64 code_load240_offset_load383469_smear_;
  uint8_t c_load250_offset_load478486_;
  __vec16_i32 (*ptr491497_);
  __vec16_i32 v_2e_i513_;
  __vec16_i32 v1_2e_i514_;
  __vec16_i32 k_load270_plus1_;
  __vec16_i1 oldMask_26_test211_and_mask_;
  bool internal_mask_26_function_mask215_any_;

  span2_ = *((&tmp__6_->field0));
  code6_ = *((&tmp__6_->field2));
  pass8_ = *((&tmp__6_->field3));
  hist10_ = *((&tmp__6_->field4));
  perm12_ = *((&tmp__6_->field5));
  mask_ = __load<2>(((&tmp__6_->field6)));
  mul_taskIndex_load_span_load_ = ((uint32_t )(((uint32_t )span2_) * ((uint32_t )tmp__9_)));
  if (((((uint32_t )(((uint32_t )tmp__10_) + ((uint32_t )4294967295u)))) == tmp__9_)) {
    goto select_true_label;
  } else {
    goto select_false_label;
  }

select_true_label: {
  n4_ = *((&tmp__6_->field1));
  select___PHI = n4_;   /* for PHI node */
  goto select_done_label;

}
select_false_label: {
  add_start_load_span_load14_ = ((uint32_t )(((uint32_t )mul_taskIndex_load_span_load_) + ((uint32_t )span2_)));
  select___PHI = add_start_load_span_load14_;   /* for PHI node */
  goto select_done_label;

}
select_done_label: {
  select_ = select___PHI;
  sub_end_load_start_load15_ = ((uint32_t )(((uint32_t )select_) - ((uint32_t )mul_taskIndex_load_span_load_)));
  div_sub_end_load_start_load15__ = ((int32_t )(((int32_t )sub_end_load_start_load15_) / ((int32_t )16u)));
  mod_sub_end_load16_start_load17__ = ((int32_t )(((int32_t )sub_end_load_start_load15_) % ((int32_t )16u)));
  mul__taskIndex_load18_ = tmp__9_ << 4u;
  internal_mask_26_function_mask24_any529_ = ((__any(mask_))&1);
  if (internal_mask_26_function_mask24_any529_) {
    goto for_loop_2e_lr_2e_ph_label;
  } else {
    goto for_exit_label;
  }

}
for_loop_2e_lr_2e_ph_label: {
  mul_j_load34__2e_elt0_ = tmp__10_ << 4u;
  hist_load_ptr2int_2void_ = ((uint8_t *)hist10_);
  gep_ptr2int_2void_ = ((uint8_t *)(&g_));
  oldMask_26_test535___PHI = __smear_i1<__vec16_i1>(1);   /* for PHI node */
  storemerge292534___PHI = __setzero_i32<__vec16_i32>();   /* for PHI node */
  storemerge292_2e_elt0533___PHI = 0u;   /* for PHI node */
  goto for_loop_label;

}
  do {     /* Syntactic loop 'for_loop' to make GCC happy */
for_loop_label: {
  oldMask_26_test535_ = oldMask_26_test535___PHI;
  storemerge292534_ = storemerge292534___PHI;
  storemerge292_2e_elt0533_ = storemerge292_2e_elt0533___PHI;
  internal_mask_26_function_mask28_ = __and(oldMask_26_test535_, mask_);
  internal_mask_26_function_mask28_all_ = ((__all(internal_mask_26_function_mask28_))&1);
  mul_sizeof_int_broadcast_j_load33_2e_elt0_ = storemerge292_2e_elt0533_ << 6u;
  ptr_ = (&hist_load_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )((((uint32_t )(((uint32_t )(((uint32_t )(((uint32_t )mul_j_load34__2e_elt0_) * ((uint32_t )storemerge292_2e_elt0533_))))) + ((uint32_t )mul__taskIndex_load18_)))) << 2u))))]);
  if (internal_mask_26_function_mask28_all_) {
    goto for_all_on_label;
  } else {
    goto for_mixed_label;
  }

}
for_mixed_label: {
  ptr419_masked_load_ = __masked_load_i32(ptr_, internal_mask_26_function_mask28_);
  ptrcast425_ = ((__vec16_i32 (*))((&gep_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )mul_sizeof_int_broadcast_j_load33_2e_elt0_)))])));
  v_2e_i_ = __load<64>(ptrcast425_);
  v1_2e_i_ = __select(internal_mask_26_function_mask28_, ptr419_masked_load_, v_2e_i_);
  __store<64>(ptrcast425_, v1_2e_i_);
  internal_mask_memory_2e_1___PHI = oldMask_26_test535_;   /* for PHI node */
  goto for_step_label;

}
for_all_on_label: {
  ptr_masked_load407_ = __load<4>((((__vec16_i32 (*))ptr_)));
  __store<64>((((__vec16_i32 (*))((&gep_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )mul_sizeof_int_broadcast_j_load33_2e_elt0_)))])))), ptr_masked_load407_);
  internal_mask_memory_2e_1___PHI = __smear_i1<__vec16_i1>(1);   /* for PHI node */
  goto for_step_label;

}
for_step_label: {
  internal_mask_memory_2e_1_ = internal_mask_memory_2e_1___PHI;
  j_load64_plus1_2e_elt0_ = ((uint32_t )(((uint32_t )storemerge292_2e_elt0533_) + ((uint32_t )1u)));
  j_load64_plus1_ = __add(storemerge292534_, __smear_i32<__vec16_i32>(1u));
  oldMask_26_test_and_mask_ = __signed_less_than_i32_and_mask(j_load64_plus1_, __smear_i32<__vec16_i32>(256u), internal_mask_memory_2e_1_);
  internal_mask_26_function_mask24_any_ = ((__any((__and(oldMask_26_test_and_mask_, mask_))))&1);
  if (internal_mask_26_function_mask24_any_) {
    oldMask_26_test535___PHI = oldMask_26_test_and_mask_;   /* for PHI node */
    storemerge292534___PHI = j_load64_plus1_;   /* for PHI node */
    storemerge292_2e_elt0533___PHI = j_load64_plus1_2e_elt0_;   /* for PHI node */
    goto for_loop_label;
  } else {
    goto for_exit_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop' */
for_exit_label: {
  mul_taskIndex_load_span_load_smear_ = __smear_i32<__vec16_i32>(mul_taskIndex_load_span_load_);
  div_sub_end_load_start_load15__smear_ = __smear_i32<__vec16_i32>(div_sub_end_load_start_load15__);
  add_start_load74_broadcast_mul__strip_load_broadcast_ = __add(mul_taskIndex_load_span_load_smear_, (__mul(div_sub_end_load_start_load15__smear_, __load<64>((const __vec16_i32  *)(VectorConstant6)))));
  add_start_load75_broadcast_mul__strip_load76_broadcast_ = __add(mul_taskIndex_load_span_load_smear_, (__mul(div_sub_end_load_start_load15__smear_, __load<64>((const __vec16_i32  *)(VectorConstant7)))));
  less_k_load_add_start_load75_broadcast_mul__strip_load76_broadcast524_ = __signed_less_than_i32(add_start_load74_broadcast_mul__strip_load_broadcast_, add_start_load75_broadcast_mul__strip_load76_broadcast_);
  internal_mask_26_function_mask82525_and_mask_ = __signed_less_than_i32_and_mask(add_start_load74_broadcast_mul__strip_load_broadcast_, add_start_load75_broadcast_mul__strip_load76_broadcast_, mask_);
  internal_mask_26_function_mask82_any526_ = ((__any(internal_mask_26_function_mask82525_and_mask_))&1);
  if (internal_mask_26_function_mask82_any526_) {
    goto for_loop69_2e_lr_2e_ph_label;
  } else {
    goto for_exit70_label;
  }

}
for_loop69_2e_lr_2e_ph_label: {
  pass8_smear_ = __smear_i32<__vec16_i32>(pass8_);
  code_load_ptr2int_2void_ = ((uint8_t *)code6_);
  gep98_ptr2int_2void_ = ((uint8_t *)(&g_));
  perm_load_ptr2int_2void_ = ((uint8_t *)perm12_);
  oldMask_26_test78528___PHI = less_k_load_add_start_load75_broadcast_mul__strip_load76_broadcast524_;   /* for PHI node */
  storemerge289527___PHI = add_start_load74_broadcast_mul__strip_load_broadcast_;   /* for PHI node */
  goto for_loop69_label;

}
  do {     /* Syntactic loop 'for_loop69' to make GCC happy */
for_loop69_label: {
  oldMask_26_test78528_ = oldMask_26_test78528___PHI;
  storemerge289527_ = storemerge289527___PHI;
  internal_mask_26_function_mask88_ = __and(oldMask_26_test78528_, mask_);
  internal_mask_26_function_mask88_all_ = ((__all(internal_mask_26_function_mask88_))&1);
  new_offsets307_ = __add((__mul(storemerge289527_, __smear_i32<__vec16_i32>(8u))), pass8_smear_);
  if (internal_mask_26_function_mask88_all_) {
    goto for_all_on85_label;
  } else {
    goto for_mixed86_label;
  }

}
for_mixed86_label: {
  c_load138_offset_load341_ = __gather_base_offsets32_i8(code_load_ptr2int_2void_, 1u, new_offsets307_, internal_mask_26_function_mask88_);
  gep145_offset_offset_load346_ = __gather_base_offsets64_i32(gep98_ptr2int_2void_, 1u, (__add((__mul(((__cast_zext(__vec16_i64 (), c_load138_offset_load341_))), __smear_i64<__vec16_i64>(64ull))), __load<64>((const __vec16_i64  *)(VectorConstant11)))), internal_mask_26_function_mask88_);
  code_load155_offset_load351_ = __gather_base_offsets32_i64(code_load_ptr2int_2void_, 8u, storemerge289527_, internal_mask_26_function_mask88_);
  __scatter_base_offsets32_i64(perm_load_ptr2int_2void_, 8u, gep145_offset_offset_load346_, code_load155_offset_load351_, internal_mask_26_function_mask88_);
  c_load165_offset_load449_ = __gather_base_offsets32_i8(code_load_ptr2int_2void_, 1u, new_offsets307_, internal_mask_26_function_mask88_);
  __scatter_base_offsets64_i32(gep98_ptr2int_2void_, 1u, (__add((__mul(((__cast_zext(__vec16_i64 (), c_load165_offset_load449_))), __smear_i64<__vec16_i64>(64ull))), __load<64>((const __vec16_i64  *)(VectorConstant11)))), (__add(gep145_offset_offset_load346_, __smear_i32<__vec16_i32>(1u))), internal_mask_26_function_mask88_);
  internal_mask_memory_2e_3___PHI = oldMask_26_test78528_;   /* for PHI node */
  goto for_step68_label;

}
for_all_on85_label: {
  c_load_offset_load309_ = __gather_base_offsets32_i8(code_load_ptr2int_2void_, 1u, new_offsets307_, __smear_i1<__vec16_i1>(1));
  gep98_offset_offset_load314_ = __gather_base_offsets64_i32(gep98_ptr2int_2void_, 1u, (__add((__mul(((__cast_zext(__vec16_i64 (), c_load_offset_load309_))), __smear_i64<__vec16_i64>(64ull))), __load<64>((const __vec16_i64  *)(VectorConstant11)))), __smear_i1<__vec16_i1>(1));
  code_load106_offset_load319_ = __gather_base_offsets32_i64(code_load_ptr2int_2void_, 8u, storemerge289527_, __smear_i1<__vec16_i1>(1));
  __scatter_base_offsets32_i64(perm_load_ptr2int_2void_, 8u, gep98_offset_offset_load314_, code_load106_offset_load319_, __smear_i1<__vec16_i1>(1));
  c_load116_offset_load433_ = __gather_base_offsets32_i8(code_load_ptr2int_2void_, 1u, new_offsets307_, __smear_i1<__vec16_i1>(1));
  __scatter_base_offsets64_i32(gep98_ptr2int_2void_, 1u, (__add((__mul(((__cast_zext(__vec16_i64 (), c_load116_offset_load433_))), __smear_i64<__vec16_i64>(64ull))), __load<64>((const __vec16_i64  *)(VectorConstant11)))), (__add(gep98_offset_offset_load314_, __smear_i32<__vec16_i32>(1u))), __smear_i1<__vec16_i1>(1));
  internal_mask_memory_2e_3___PHI = __smear_i1<__vec16_i1>(1);   /* for PHI node */
  goto for_step68_label;

}
for_step68_label: {
  internal_mask_memory_2e_3_ = internal_mask_memory_2e_3___PHI;
  k_load185_plus1_ = __add(storemerge289527_, __smear_i32<__vec16_i32>(1u));
  oldMask_26_test78_and_mask_ = __signed_less_than_i32_and_mask(k_load185_plus1_, add_start_load75_broadcast_mul__strip_load76_broadcast_, internal_mask_memory_2e_3_);
  internal_mask_26_function_mask82_any_ = ((__any((__and(oldMask_26_test78_and_mask_, mask_))))&1);
  if (internal_mask_26_function_mask82_any_) {
    oldMask_26_test78528___PHI = oldMask_26_test78_and_mask_;   /* for PHI node */
    storemerge289527___PHI = k_load185_plus1_;   /* for PHI node */
    goto for_loop69_label;
  } else {
    goto for_exit70_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop69' */
for_exit70_label: {
  internal_mask_26_function_mask196_any_ = ((__any((__and(mask_, __vec16_i1 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)))))&1);
  if (internal_mask_26_function_mask196_any_) {
    goto safe_if_run_true_label;
  } else {
    goto safe_if_after_true_label;
  }

}
safe_if_after_true_label: {
  return;
}
safe_if_run_true_label: {
  add_start_load205_mul__strip_load206_ = ((uint32_t )(((uint32_t )(div_sub_end_load_start_load15__ << 4u)) + ((uint32_t )mul_taskIndex_load_span_load_)));
  add_start_load205_mul__strip_load206_smear_ = __smear_i32<__vec16_i32>(add_start_load205_mul__strip_load206_);
  add_add_start_load208_mul__strip_load209_tail_load_smear_ = __smear_i32<__vec16_i32>((((uint32_t )(((uint32_t )add_start_load205_mul__strip_load206_) + ((uint32_t )mod_sub_end_load16_start_load17__)))));
  oldMask_26_test211516_and_mask_ = __signed_less_than_i32_and_mask(add_start_load205_mul__strip_load206_smear_, add_add_start_load208_mul__strip_load209_tail_load_smear_, __vec16_i1 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1));
  internal_mask_26_function_mask215_any518_ = ((__any((__and(oldMask_26_test211516_and_mask_, mask_))))&1);
  if (internal_mask_26_function_mask215_any518_) {
    goto for_loop199_2e_lr_2e_ph_label;
  } else {
    goto safe_if_after_true_label;
  }

}
for_loop199_2e_lr_2e_ph_label: {
  code_load220_ptr2int_2void_ = ((uint8_t *)code6_);
  perm_load238_ptr2int_2void_ = ((uint8_t *)perm12_);
  oldMask_26_test211523___PHI = oldMask_26_test211516_and_mask_;   /* for PHI node */
  storemerge522___PHI = add_start_load205_mul__strip_load206_smear_;   /* for PHI node */
  storemerge_2e_elt0521___PHI = add_start_load205_mul__strip_load206_;   /* for PHI node */
  goto for_loop199_label;

}
  do {     /* Syntactic loop 'for_loop199' to make GCC happy */
for_loop199_label: {
  oldMask_26_test211523_ = oldMask_26_test211523___PHI;
  storemerge522_ = storemerge522___PHI;
  storemerge_2e_elt0521_ = storemerge_2e_elt0521___PHI;
  mul__k_load219_2e_elt0_ = storemerge_2e_elt0521_ << 3u;
  ptr457_ = (&code_load220_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )(((uint32_t )(((uint32_t )mul__k_load219_2e_elt0_) + ((uint32_t )pass8_)))))))]);
  c_load223_offset_load373459_ = *ptr457_;
  internal_mask_26_function_mask236_ = __and(oldMask_26_test211523_, mask_);
  ptr463_masked_load_ = __masked_load_i32((((uint8_t *)((&g_.array[((int64_t )(((uint64_t )(uint8_t )c_load223_offset_load373459_)))])))), internal_mask_26_function_mask236_);
  code_load240_offset_load383469_ = *(((uint64_t *)((&code_load220_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )mul__k_load219_2e_elt0_)))]))));
  code_load240_offset_load383469_smear_ = __smear_i64<__vec16_i64>(code_load240_offset_load383469_);
  __scatter_base_offsets32_i64(perm_load238_ptr2int_2void_, 8u, ptr463_masked_load_, code_load240_offset_load383469_smear_, internal_mask_26_function_mask236_);
  c_load250_offset_load478486_ = *ptr457_;
  ptr491497_ = (&g_.array[((int64_t )(((uint64_t )(uint8_t )c_load250_offset_load478486_)))]);
  v_2e_i513_ = __load<64>(ptr491497_);
  v1_2e_i514_ = __select(internal_mask_26_function_mask236_, (__add(ptr463_masked_load_, __smear_i32<__vec16_i32>(1u))), v_2e_i513_);
  __store<64>(ptr491497_, v1_2e_i514_);
  k_load270_plus1_ = __add(storemerge522_, __smear_i32<__vec16_i32>(1u));
  oldMask_26_test211_and_mask_ = __signed_less_than_i32_and_mask(k_load270_plus1_, add_add_start_load208_mul__strip_load209_tail_load_smear_, oldMask_26_test211523_);
  internal_mask_26_function_mask215_any_ = ((__any((__and(oldMask_26_test211_and_mask_, mask_))))&1);
  if (internal_mask_26_function_mask215_any_) {
    oldMask_26_test211523___PHI = oldMask_26_test211_and_mask_;   /* for PHI node */
    storemerge522___PHI = k_load270_plus1_;   /* for PHI node */
    storemerge_2e_elt0521___PHI = (((uint32_t )(((uint32_t )storemerge_2e_elt0521_) + ((uint32_t )1u))));   /* for PHI node */
    goto for_loop199_label;
  } else {
    goto safe_if_after_true_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop199' */
}


static const int32_t __attribute__ ((aligned(64))) VectorConstant12[] = { 0u, 1u, 2u, 3u, 4u, 5u, 6u, 7u, 8u, 9u, 10u, 11u, 12u, 13u, 14u, 15u,  };

void copy___uniuniun_3C_unI_3E_un_3C_unI_3E_(l_unnamed_2 *tmp__11_, uint32_t tmp__12_, uint32_t tmp__13_, uint32_t tmp__14_, uint32_t tmp__15_) {
  uint32_t span2_;
  uint64_t *from6_;
  uint64_t *to8_;
  uint32_t mul_taskIndex_load_span_load_;
  uint32_t n4_;
  uint32_t add_start_load_span_load10_;
  uint32_t select_;
  uint32_t select___PHI;
  uint32_t aligned_end_;
  uint8_t *from_load_ptr2int_2void_;
  uint8_t *to_load_ptr2int_2void_;
  uint32_t counter_2e_1104_;
  uint32_t counter_2e_1104___PHI;
  uint64_t tmp__16_;
  __vec16_i64 ptr91_masked_load92_;
  uint32_t new_counter_;
  uint32_t counter_2e_1_2e_lcssa_;
  uint32_t counter_2e_1_2e_lcssa___PHI;
  __vec16_i32 counter_2e_1_2e_lcssa_smear_;
  __vec16_i32 select_smear_;
  __vec16_i1 cmp52_;
  uint64_t tmp__17_;
  __vec16_i64 ptr95_masked_load_;

  span2_ = *((&tmp__11_->field0));
  from6_ = *((&tmp__11_->field2));
  to8_ = *((&tmp__11_->field3));
  mul_taskIndex_load_span_load_ = ((uint32_t )(((uint32_t )span2_) * ((uint32_t )tmp__14_)));
  if (((((uint32_t )(((uint32_t )tmp__15_) + ((uint32_t )4294967295u)))) == tmp__14_)) {
    goto select_true_label;
  } else {
    goto select_false_label;
  }

select_true_label: {
  n4_ = *((&tmp__11_->field1));
  select___PHI = n4_;   /* for PHI node */
  goto select_done_label;

}
select_false_label: {
  add_start_load_span_load10_ = ((uint32_t )(((uint32_t )mul_taskIndex_load_span_load_) + ((uint32_t )span2_)));
  select___PHI = add_start_load_span_load10_;   /* for PHI node */
  goto select_done_label;

}
select_done_label: {
  select_ = select___PHI;
  aligned_end_ = ((uint32_t )(((uint32_t )select_) - ((uint32_t )(((int32_t )(((int32_t )(((uint32_t )(((uint32_t )select_) - ((uint32_t )mul_taskIndex_load_span_load_))))) % ((int32_t )16u)))))));
  if ((((int32_t )mul_taskIndex_load_span_load_) < ((int32_t )aligned_end_))) {
    goto foreach_full_body_2e_lr_2e_ph_label;
  } else {
    counter_2e_1_2e_lcssa___PHI = mul_taskIndex_load_span_load_;   /* for PHI node */
    goto partial_inner_all_outer_label;
  }

}
foreach_full_body_2e_lr_2e_ph_label: {
  from_load_ptr2int_2void_ = ((uint8_t *)from6_);
  to_load_ptr2int_2void_ = ((uint8_t *)to8_);
  counter_2e_1104___PHI = mul_taskIndex_load_span_load_;   /* for PHI node */
  goto foreach_full_body_label;

}
  do {     /* Syntactic loop 'foreach_full_body' to make GCC happy */
foreach_full_body_label: {
  counter_2e_1104_ = counter_2e_1104___PHI;
  tmp__16_ = ((int64_t )(int32_t )(counter_2e_1104_ << 3u));
  ptr91_masked_load92_ = __load<8>((((__vec16_i64 (*))((&from_load_ptr2int_2void_[((int64_t )tmp__16_)])))));
  __store<8>((((__vec16_i64 (*))((&to_load_ptr2int_2void_[((int64_t )tmp__16_)])))), ptr91_masked_load92_);
  new_counter_ = ((uint32_t )(((uint32_t )counter_2e_1104_) + ((uint32_t )16u)));
  if ((((int32_t )new_counter_) < ((int32_t )aligned_end_))) {
    counter_2e_1104___PHI = new_counter_;   /* for PHI node */
    goto foreach_full_body_label;
  } else {
    counter_2e_1_2e_lcssa___PHI = new_counter_;   /* for PHI node */
    goto partial_inner_all_outer_label;
  }

}
  } while (1); /* end of syntactic loop 'foreach_full_body' */
foreach_reset_label: {
  return;
}
partial_inner_all_outer_label: {
  counter_2e_1_2e_lcssa_ = counter_2e_1_2e_lcssa___PHI;
  if ((((int32_t )counter_2e_1_2e_lcssa_) < ((int32_t )select_))) {
    goto partial_inner_only_label;
  } else {
    goto foreach_reset_label;
  }

}
partial_inner_only_label: {
  counter_2e_1_2e_lcssa_smear_ = __smear_i32<__vec16_i32>(counter_2e_1_2e_lcssa_);
  select_smear_ = __smear_i32<__vec16_i32>(select_);
  cmp52_ = __signed_less_than_i32((__add(counter_2e_1_2e_lcssa_smear_, __load<64>((const __vec16_i32  *)(VectorConstant12)))), select_smear_);
  tmp__17_ = ((int64_t )(int32_t )(counter_2e_1_2e_lcssa_ << 3u));
  ptr95_masked_load_ = __masked_load_i64(((&(((uint8_t *)from6_))[((int64_t )tmp__17_)])), cmp52_);
  __masked_store_i64((((__vec16_i64 (*))((&(((uint8_t *)to8_))[((int64_t )tmp__17_)])))), ptr95_masked_load_, cmp52_);
  goto foreach_reset_label;

}
}


static const int32_t __attribute__ ((aligned(64))) VectorConstant13[] = { 0u, 1u, 2u, 3u, 4u, 5u, 6u, 7u, 8u, 9u, 10u, 11u, 12u, 13u, 14u, 15u,  };
static const int32_t __attribute__ ((aligned(64))) VectorConstant14[] = { 0u, 1u, 2u, 3u, 4u, 5u, 6u, 7u, 8u, 9u, 10u, 11u, 12u, 13u, 14u, 15u,  };

void pack___uniuniun_3C_unu_3E_un_3C_unI_3E_(l_unnamed_3 *tmp__18_, uint32_t tmp__19_, uint32_t tmp__20_, uint32_t tmp__21_, uint32_t tmp__22_) {
  uint32_t span2_;
  uint32_t *code6_;
  uint64_t *pair8_;
  uint32_t mul_taskIndex_load_span_load_;
  uint32_t n4_;
  uint32_t add_start_load_span_load10_;
  uint32_t select_;
  uint32_t select___PHI;
  uint32_t aligned_end_;
  uint8_t *code_load_ptr2int_2void_;
  uint8_t *pair_load_ptr2int_2void_;
  uint32_t counter_2e_1107_;
  uint32_t counter_2e_1107___PHI;
  __vec16_i32 counter_2e_1107_smear_;
  __vec16_i32 ptr94_masked_load95_;
  uint32_t new_counter_;
  uint32_t counter_2e_1_2e_lcssa_;
  uint32_t counter_2e_1_2e_lcssa___PHI;
  __vec16_i32 counter_2e_1_2e_lcssa_smear_;
  __vec16_i32 iter_val50_;
  __vec16_i32 select_smear_;
  __vec16_i1 cmp53_;
  __vec16_i32 ptr98_masked_load_;

  span2_ = *((&tmp__18_->field0));
  code6_ = *((&tmp__18_->field2));
  pair8_ = *((&tmp__18_->field3));
  mul_taskIndex_load_span_load_ = ((uint32_t )(((uint32_t )span2_) * ((uint32_t )tmp__21_)));
  if (((((uint32_t )(((uint32_t )tmp__22_) + ((uint32_t )4294967295u)))) == tmp__21_)) {
    goto select_true_label;
  } else {
    goto select_false_label;
  }

select_true_label: {
  n4_ = *((&tmp__18_->field1));
  select___PHI = n4_;   /* for PHI node */
  goto select_done_label;

}
select_false_label: {
  add_start_load_span_load10_ = ((uint32_t )(((uint32_t )mul_taskIndex_load_span_load_) + ((uint32_t )span2_)));
  select___PHI = add_start_load_span_load10_;   /* for PHI node */
  goto select_done_label;

}
select_done_label: {
  select_ = select___PHI;
  aligned_end_ = ((uint32_t )(((uint32_t )select_) - ((uint32_t )(((int32_t )(((int32_t )(((uint32_t )(((uint32_t )select_) - ((uint32_t )mul_taskIndex_load_span_load_))))) % ((int32_t )16u)))))));
  if ((((int32_t )mul_taskIndex_load_span_load_) < ((int32_t )aligned_end_))) {
    goto foreach_full_body_2e_lr_2e_ph_label;
  } else {
    counter_2e_1_2e_lcssa___PHI = mul_taskIndex_load_span_load_;   /* for PHI node */
    goto partial_inner_all_outer_label;
  }

}
foreach_full_body_2e_lr_2e_ph_label: {
  code_load_ptr2int_2void_ = ((uint8_t *)code6_);
  pair_load_ptr2int_2void_ = ((uint8_t *)pair8_);
  counter_2e_1107___PHI = mul_taskIndex_load_span_load_;   /* for PHI node */
  goto foreach_full_body_label;

}
  do {     /* Syntactic loop 'foreach_full_body' to make GCC happy */
foreach_full_body_label: {
  counter_2e_1107_ = counter_2e_1107___PHI;
  counter_2e_1107_smear_ = __smear_i32<__vec16_i32>(counter_2e_1107_);
  ptr94_masked_load95_ = __load<4>((((__vec16_i32 (*))((&code_load_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )(counter_2e_1107_ << 2u))))])))));
  __store<8>((((__vec16_i64 (*))((&pair_load_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )(counter_2e_1107_ << 3u))))])))), (__add((__shl(((__cast_sext(__vec16_i64 (), (__add(counter_2e_1107_smear_, __load<64>((const __vec16_i32  *)(VectorConstant14))))))), __extract_element(__smear_i64<__vec16_i64>(32ull), 0) )), ((__cast_zext(__vec16_i64 (), ptr94_masked_load95_))))));
  new_counter_ = ((uint32_t )(((uint32_t )counter_2e_1107_) + ((uint32_t )16u)));
  if ((((int32_t )new_counter_) < ((int32_t )aligned_end_))) {
    counter_2e_1107___PHI = new_counter_;   /* for PHI node */
    goto foreach_full_body_label;
  } else {
    counter_2e_1_2e_lcssa___PHI = new_counter_;   /* for PHI node */
    goto partial_inner_all_outer_label;
  }

}
  } while (1); /* end of syntactic loop 'foreach_full_body' */
foreach_reset_label: {
  return;
}
partial_inner_all_outer_label: {
  counter_2e_1_2e_lcssa_ = counter_2e_1_2e_lcssa___PHI;
  if ((((int32_t )counter_2e_1_2e_lcssa_) < ((int32_t )select_))) {
    goto partial_inner_only_label;
  } else {
    goto foreach_reset_label;
  }

}
partial_inner_only_label: {
  counter_2e_1_2e_lcssa_smear_ = __smear_i32<__vec16_i32>(counter_2e_1_2e_lcssa_);
  iter_val50_ = __add(counter_2e_1_2e_lcssa_smear_, __load<64>((const __vec16_i32  *)(VectorConstant14)));
  select_smear_ = __smear_i32<__vec16_i32>(select_);
  cmp53_ = __signed_less_than_i32(iter_val50_, select_smear_);
  ptr98_masked_load_ = __masked_load_i32(((&(((uint8_t *)code6_))[((int64_t )(((int64_t )(int32_t )(counter_2e_1_2e_lcssa_ << 2u))))])), cmp53_);
  __masked_store_i64((((__vec16_i64 (*))((&(((uint8_t *)pair8_))[((int64_t )(((int64_t )(int32_t )(counter_2e_1_2e_lcssa_ << 3u))))])))), (__add((__shl(((__cast_sext(__vec16_i64 (), iter_val50_))), __extract_element(__smear_i64<__vec16_i64>(32ull), 0) )), ((__cast_zext(__vec16_i64 (), ptr98_masked_load_))))), cmp53_);
  goto foreach_reset_label;

}
}


static const int32_t __attribute__ ((aligned(64))) VectorConstant15[] = { 0u, 1u, 2u, 3u, 4u, 5u, 6u, 7u, 8u, 9u, 10u, 11u, 12u, 13u, 14u, 15u,  };

void unpack___uniuniun_3C_unI_3E_un_3C_unu_3E_un_3C_uni_3E_(l_unnamed_4 *tmp__23_, uint32_t tmp__24_, uint32_t tmp__25_, uint32_t tmp__26_, uint32_t tmp__27_) {
  uint32_t span2_;
  uint64_t *pair6_;
  uint32_t *code8_;
  uint32_t *order10_;
  uint32_t mul_taskIndex_load_span_load_;
  uint32_t n4_;
  uint32_t add_start_load_span_load12_;
  uint32_t select_;
  uint32_t select___PHI;
  uint32_t aligned_end_;
  uint8_t *pair_load_ptr2int_2void_;
  uint8_t *code_load_ptr2int_2void_;
  uint8_t *order_load_ptr2int_2void_;
  uint32_t counter_2e_1175_;
  uint32_t counter_2e_1175___PHI;
  __vec16_i64 (*ptr_cast_for_load_);
  __vec16_i64 ptr139_masked_load140_;
  uint64_t tmp__28_;
  __vec16_i64 ptr143_masked_load145_;
  uint32_t new_counter_;
  uint32_t counter_2e_1_2e_lcssa_;
  uint32_t counter_2e_1_2e_lcssa___PHI;
  __vec16_i32 counter_2e_1_2e_lcssa_smear_;
  __vec16_i32 select_smear_;
  __vec16_i1 cmp65_;
  uint8_t *ptr153_;
  __vec16_i64 ptr153_masked_load_;
  uint64_t tmp__29_;
  __vec16_i64 ptr166_masked_load_;

  span2_ = *((&tmp__23_->field0));
  pair6_ = *((&tmp__23_->field2));
  code8_ = *((&tmp__23_->field3));
  order10_ = *((&tmp__23_->field4));
  mul_taskIndex_load_span_load_ = ((uint32_t )(((uint32_t )span2_) * ((uint32_t )tmp__26_)));
  if (((((uint32_t )(((uint32_t )tmp__27_) + ((uint32_t )4294967295u)))) == tmp__26_)) {
    goto select_true_label;
  } else {
    goto select_false_label;
  }

select_true_label: {
  n4_ = *((&tmp__23_->field1));
  select___PHI = n4_;   /* for PHI node */
  goto select_done_label;

}
select_false_label: {
  add_start_load_span_load12_ = ((uint32_t )(((uint32_t )mul_taskIndex_load_span_load_) + ((uint32_t )span2_)));
  select___PHI = add_start_load_span_load12_;   /* for PHI node */
  goto select_done_label;

}
select_done_label: {
  select_ = select___PHI;
  aligned_end_ = ((uint32_t )(((uint32_t )select_) - ((uint32_t )(((int32_t )(((int32_t )(((uint32_t )(((uint32_t )select_) - ((uint32_t )mul_taskIndex_load_span_load_))))) % ((int32_t )16u)))))));
  if ((((int32_t )mul_taskIndex_load_span_load_) < ((int32_t )aligned_end_))) {
    goto foreach_full_body_2e_lr_2e_ph_label;
  } else {
    counter_2e_1_2e_lcssa___PHI = mul_taskIndex_load_span_load_;   /* for PHI node */
    goto partial_inner_all_outer_label;
  }

}
foreach_full_body_2e_lr_2e_ph_label: {
  pair_load_ptr2int_2void_ = ((uint8_t *)pair6_);
  code_load_ptr2int_2void_ = ((uint8_t *)code8_);
  order_load_ptr2int_2void_ = ((uint8_t *)order10_);
  counter_2e_1175___PHI = mul_taskIndex_load_span_load_;   /* for PHI node */
  goto foreach_full_body_label;

}
  do {     /* Syntactic loop 'foreach_full_body' to make GCC happy */
foreach_full_body_label: {
  counter_2e_1175_ = counter_2e_1175___PHI;
  ptr_cast_for_load_ = ((__vec16_i64 (*))((&pair_load_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )(counter_2e_1175_ << 3u))))])));
  ptr139_masked_load140_ = __load<8>(ptr_cast_for_load_);
  tmp__28_ = ((int64_t )(int32_t )(counter_2e_1175_ << 2u));
  __store<4>((((__vec16_i32 (*))((&code_load_ptr2int_2void_[((int64_t )tmp__28_)])))), ((__cast_trunc(__vec16_i32 (), ptr139_masked_load140_))));
  ptr143_masked_load145_ = __load<8>(ptr_cast_for_load_);
  __store<4>((((__vec16_i32 (*))((&order_load_ptr2int_2void_[((int64_t )tmp__28_)])))), ((__cast_trunc(__vec16_i32 (), (__ashr(ptr143_masked_load145_, __extract_element(__smear_i64<__vec16_i64>(32ull), 0) ))))));
  new_counter_ = ((uint32_t )(((uint32_t )counter_2e_1175_) + ((uint32_t )16u)));
  if ((((int32_t )new_counter_) < ((int32_t )aligned_end_))) {
    counter_2e_1175___PHI = new_counter_;   /* for PHI node */
    goto foreach_full_body_label;
  } else {
    counter_2e_1_2e_lcssa___PHI = new_counter_;   /* for PHI node */
    goto partial_inner_all_outer_label;
  }

}
  } while (1); /* end of syntactic loop 'foreach_full_body' */
foreach_reset_label: {
  return;
}
partial_inner_all_outer_label: {
  counter_2e_1_2e_lcssa_ = counter_2e_1_2e_lcssa___PHI;
  if ((((int32_t )counter_2e_1_2e_lcssa_) < ((int32_t )select_))) {
    goto partial_inner_only_label;
  } else {
    goto foreach_reset_label;
  }

}
partial_inner_only_label: {
  counter_2e_1_2e_lcssa_smear_ = __smear_i32<__vec16_i32>(counter_2e_1_2e_lcssa_);
  select_smear_ = __smear_i32<__vec16_i32>(select_);
  cmp65_ = __signed_less_than_i32((__add(counter_2e_1_2e_lcssa_smear_, __load<64>((const __vec16_i32  *)(VectorConstant15)))), select_smear_);
  ptr153_ = (&(((uint8_t *)pair6_))[((int64_t )(((int64_t )(int32_t )(counter_2e_1_2e_lcssa_ << 3u))))]);
  ptr153_masked_load_ = __masked_load_i64(ptr153_, cmp65_);
  tmp__29_ = ((int64_t )(int32_t )(counter_2e_1_2e_lcssa_ << 2u));
  __masked_store_i32((((__vec16_i32 (*))((&(((uint8_t *)code8_))[((int64_t )tmp__29_)])))), ((__cast_trunc(__vec16_i32 (), ptr153_masked_load_))), cmp65_);
  ptr166_masked_load_ = __masked_load_i64(ptr153_, cmp65_);
  __masked_store_i32((((__vec16_i32 (*))((&(((uint8_t *)order10_))[((int64_t )tmp__29_)])))), ((__cast_trunc(__vec16_i32 (), (__ashr(ptr166_masked_load_, __extract_element(__smear_i64<__vec16_i64>(32ull), 0) ))))), cmp65_);
  goto foreach_reset_label;

}
}



void addup___un_3C_uni_3E_un_3C_uni_3E_(l_unnamed_5 *tmp__30_, uint32_t tmp__31_, uint32_t tmp__32_, uint32_t tmp__33_, uint32_t tmp__34_) {
  uint32_t *h2_;
  uint32_t *g4_;
  uint64_t mul__taskIndex_load_to_int64_;
  uint64_t indvars_2e_iv_;
  uint64_t indvars_2e_iv___PHI;
  uint32_t y_2e_023_;
  uint32_t y_2e_023___PHI;
  uint32_t *u_load_offset_;
  uint32_t u_load_offset_load_;
  uint32_t add_y_load16_x_load_;
  uint64_t indvars_2e_iv_2e_next_;

  h2_ = *((&tmp__30_->field0));
  g4_ = *((&tmp__30_->field1));
  mul__taskIndex_load_to_int64_ = ((uint64_t )(uint32_t )(tmp__33_ << 12u));
  indvars_2e_iv___PHI = 0ull;   /* for PHI node */
  y_2e_023___PHI = 0u;   /* for PHI node */
  goto for_loop_label;

  do {     /* Syntactic loop 'for_loop' to make GCC happy */
for_loop_label: {
  indvars_2e_iv_ = indvars_2e_iv___PHI;
  y_2e_023_ = y_2e_023___PHI;
  u_load_offset_ = (&h2_[((int64_t )(((uint64_t )(((uint64_t )indvars_2e_iv_) + ((uint64_t )mul__taskIndex_load_to_int64_)))))]);
  u_load_offset_load_ = *u_load_offset_;
  *u_load_offset_ = y_2e_023_;
  add_y_load16_x_load_ = ((uint32_t )(((uint32_t )u_load_offset_load_) + ((uint32_t )y_2e_023_)));
  indvars_2e_iv_2e_next_ = ((uint64_t )(((uint64_t )indvars_2e_iv_) + ((uint64_t )1ull)));
  if (((((uint32_t )indvars_2e_iv_2e_next_)) == 4096u)) {
    goto for_exit_label;
  } else {
    indvars_2e_iv___PHI = indvars_2e_iv_2e_next_;   /* for PHI node */
    y_2e_023___PHI = add_y_load16_x_load_;   /* for PHI node */
    goto for_loop_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop' */
for_exit_label: {
  *((&g4_[((int64_t )(((uint64_t )(uint32_t )tmp__33_)))])) = add_y_load16_x_load_;
  return;
}
}



void bumpup___un_3C_uni_3E_un_3C_uni_3E_(l_unnamed_5 *tmp__35_, uint32_t tmp__36_, uint32_t tmp__37_, uint32_t tmp__38_, uint32_t tmp__39_) {
  uint32_t *h2_;
  uint32_t *g4_;
  uint64_t mul__taskIndex_load_to_int64_;
  uint32_t g_load_offset_load_;
  __vec16_i32 g_load_offset_load_smear_;
  uint64_t indvars_2e_iv_;
  uint64_t indvars_2e_iv___PHI;
  __vec16_i32 (*ptr_cast_for_load_);
  __vec16_i32 ptr_masked_load87_;
  uint64_t indvars_2e_iv_2e_next_;

  h2_ = *((&tmp__35_->field0));
  g4_ = *((&tmp__35_->field1));
  mul__taskIndex_load_to_int64_ = ((uint64_t )(uint32_t )(tmp__38_ << 12u));
  g_load_offset_load_ = *((&g4_[((int64_t )(((uint64_t )(uint32_t )tmp__38_)))]));
  g_load_offset_load_smear_ = __smear_i32<__vec16_i32>(g_load_offset_load_);
  indvars_2e_iv___PHI = 0ull;   /* for PHI node */
  goto foreach_full_body_label;

  do {     /* Syntactic loop 'foreach_full_body' to make GCC happy */
foreach_full_body_label: {
  indvars_2e_iv_ = indvars_2e_iv___PHI;
  ptr_cast_for_load_ = ((__vec16_i32 (*))((&h2_[((int64_t )(((uint64_t )(((uint64_t )mul__taskIndex_load_to_int64_) + ((uint64_t )indvars_2e_iv_)))))])));
  ptr_masked_load87_ = __load<4>(ptr_cast_for_load_);
  __store<4>(ptr_cast_for_load_, (__add(ptr_masked_load87_, g_load_offset_load_smear_)));
  indvars_2e_iv_2e_next_ = ((uint64_t )(((uint64_t )indvars_2e_iv_) + ((uint64_t )16ull)));
  if ((((int32_t )(((uint32_t )indvars_2e_iv_2e_next_))) < ((int32_t )4096u))) {
    indvars_2e_iv___PHI = indvars_2e_iv_2e_next_;   /* for PHI node */
    goto foreach_full_body_label;
  } else {
    goto partial_inner_all_outer_label;
  }

}
  } while (1); /* end of syntactic loop 'foreach_full_body' */
partial_inner_all_outer_label: {
  return;
}
}



static void prefix_sum___uniun_3C_uni_3E_(uint32_t num_, uint32_t *h_, __vec16_i1 __mask_) {
  uint8_t *ptr_2e_i_;    /* Address-exposed local */
  uint8_t *launch_group_handle_;    /* Address-exposed local */
  uint8_t *tmp__40_;
  uint32_t call1_2e_i_;
  uint8_t *ptr_val_2e_i_;
  uint32_t *new_cast_ptr_;
  uint8_t *args_ptr_;
  uint8_t *launch_group_handle_load_;
  uint32_t g_load17_offset_load_;
  uint32_t g_load17_offset_load___PHI;
  uint64_t indvars_2e_iv_;
  uint64_t indvars_2e_iv___PHI;
  uint32_t *g_load15_offset_;
  uint32_t g_load15_offset_load_;
  uint32_t add_g_load15_offset_load_g_load17_offset_load_;
  uint64_t indvars_2e_iv_2e_next_;
  uint8_t *args_ptr31_;
  uint8_t *launch_group_handle_load37_;
  uint8_t *launch_group_handle_load42_;

  *(&launch_group_handle_) = ((uint8_t *)/*NULL*/0);
  tmp__40_ = ((uint8_t *)(&ptr_2e_i_));
  call1_2e_i_ = posix_memalign((void **)(&ptr_2e_i_), 64ull, (((int64_t )(int32_t )(((uint32_t )(((uint32_t )(num_ << 2u)) + ((uint32_t )4u)))))));
  ptr_val_2e_i_ = *(&ptr_2e_i_);
  new_cast_ptr_ = ((uint32_t *)ptr_val_2e_i_);
  args_ptr_ = ISPCAlloc((&launch_group_handle_), 24ull, 64u);
  *(((uint32_t **)args_ptr_)) = h_;
  *(((uint32_t **)((&args_ptr_[((int64_t )8ull)])))) = (((uint32_t *)((&ptr_val_2e_i_[((int64_t )4ull)]))));
  __store<2>((((__vec16_i1 (*))((&args_ptr_[((int64_t )16ull)])))), __mask_);
  ISPCLaunch((&launch_group_handle_), ((uint8_t *)addup___un_3C_uni_3E_un_3C_uni_3E_), args_ptr_, num_);
  launch_group_handle_load_ = *(&launch_group_handle_);
  if ((launch_group_handle_load_ == ((uint8_t *)/*NULL*/0))) {
    goto post_sync_label;
  } else {
    goto call_sync_label;
  }

call_sync_label: {
  ISPCSync(launch_group_handle_load_);
  *(&launch_group_handle_) = ((uint8_t *)/*NULL*/0);
  goto post_sync_label;

}
post_sync_label: {
  *new_cast_ptr_ = 0u;
  if ((((int32_t )num_) > ((int32_t )1u))) {
    g_load17_offset_load___PHI = 0u;   /* for PHI node */
    indvars_2e_iv___PHI = 1ull;   /* for PHI node */
    goto for_loop_label;
  } else {
    goto for_exit_label;
  }

}
  do {     /* Syntactic loop 'for_loop' to make GCC happy */
for_loop_label: {
  g_load17_offset_load_ = g_load17_offset_load___PHI;
  indvars_2e_iv_ = indvars_2e_iv___PHI;
  g_load15_offset_ = (&new_cast_ptr_[((int64_t )indvars_2e_iv_)]);
  g_load15_offset_load_ = *g_load15_offset_;
  add_g_load15_offset_load_g_load17_offset_load_ = ((uint32_t )(((uint32_t )g_load15_offset_load_) + ((uint32_t )g_load17_offset_load_)));
  *g_load15_offset_ = add_g_load15_offset_load_g_load17_offset_load_;
  indvars_2e_iv_2e_next_ = ((uint64_t )(((uint64_t )indvars_2e_iv_) + ((uint64_t )1ull)));
  if (((((uint32_t )indvars_2e_iv_2e_next_)) == num_)) {
    goto for_exit_label;
  } else {
    g_load17_offset_load___PHI = add_g_load15_offset_load_g_load17_offset_load_;   /* for PHI node */
    indvars_2e_iv___PHI = indvars_2e_iv_2e_next_;   /* for PHI node */
    goto for_loop_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop' */
for_exit_label: {
  args_ptr31_ = ISPCAlloc((&launch_group_handle_), 24ull, 64u);
  *(((uint32_t **)args_ptr31_)) = h_;
  *(((uint32_t **)((&args_ptr31_[((int64_t )8ull)])))) = new_cast_ptr_;
  __store<2>((((__vec16_i1 (*))((&args_ptr31_[((int64_t )16ull)])))), __mask_);
  ISPCLaunch((&launch_group_handle_), ((uint8_t *)bumpup___un_3C_uni_3E_un_3C_uni_3E_), args_ptr31_, num_);
  launch_group_handle_load37_ = *(&launch_group_handle_);
  if ((launch_group_handle_load37_ == ((uint8_t *)/*NULL*/0))) {
    goto post_sync40_label;
  } else {
    goto call_sync39_label;
  }

}
call_sync39_label: {
  ISPCSync(launch_group_handle_load37_);
  *(&launch_group_handle_) = ((uint8_t *)/*NULL*/0);
  goto post_sync40_label;

}
post_sync40_label: {
  free(ptr_val_2e_i_);
  launch_group_handle_load42_ = *(&launch_group_handle_);
  if ((launch_group_handle_load42_ == ((uint8_t *)/*NULL*/0))) {
    goto post_sync45_label;
  } else {
    goto call_sync44_label;
  }

}
call_sync44_label: {
  ISPCSync(launch_group_handle_load42_);
  *(&launch_group_handle_) = ((uint8_t *)/*NULL*/0);
  goto post_sync45_label;

}
post_sync45_label: {
  return;
}
}



void sort_ispc___uniun_3C_unu_3E_un_3C_uni_3E_uni(uint32_t n_, uint32_t *code_, uint32_t *order_, uint32_t ntasks_, __vec16_i1 __mask_) {
  uint8_t *ptr_2e_i129_;    /* Address-exposed local */
  uint8_t *ptr_2e_i126_;    /* Address-exposed local */
  uint8_t *ptr_2e_i_;    /* Address-exposed local */
  uint8_t *launch_group_handle_;    /* Address-exposed local */
  uint64_t call_2e_i_2e_i_;
  uint32_t conv_2e_i_2e_i_;
  uint32_t select_;
  uint32_t select___PHI;
  uint32_t div_n_load_num_load_;
  uint8_t *tmp__41_;
  uint32_t call1_2e_i_;
  uint8_t *ptr_val_2e_i_;
  uint32_t *new_cast_ptr_;
  uint64_t alloc_size6411_;
  uint8_t *tmp__42_;
  uint32_t call1_2e_i127_;
  uint8_t *ptr_val_2e_i128_;
  uint64_t *new12_cast_ptr_;
  uint8_t *tmp__43_;
  uint32_t call1_2e_i130_;
  uint8_t *ptr_val_2e_i131_;
  uint64_t *new16_cast_ptr_;
  uint8_t *args_ptr_;
  uint8_t *launch_group_handle_load_;
  uint8_t *args_ptr35132_;
  uint8_t *funarg39136_;
  uint8_t *funarg39139_;
  uint8_t *funarg39139___PHI;
  uint8_t *args_ptr35138_;
  uint8_t *args_ptr35138___PHI;
  uint32_t storemerge137_;
  uint32_t storemerge137___PHI;
  uint8_t *launch_group_handle_load44_;
  uint8_t *launch_group_handle_load113_;
  uint8_t *args_ptr61_;
  uint8_t *launch_group_handle_load71_;
  uint8_t *args_ptr83_;
  uint8_t *launch_group_handle_load91_;
  uint32_t pass_load95_plus1_;
  uint8_t *args_ptr35_;
  uint8_t *funarg39_;
  uint8_t *launch_group_handle_load122_;

  *(&launch_group_handle_) = ((uint8_t *)/*NULL*/0);
  if ((((int32_t )ntasks_) < ((int32_t )1u))) {
    goto select_true_label;
  } else {
    select___PHI = ntasks_;   /* for PHI node */
    goto select_done_label;
  }

select_true_label: {
  call_2e_i_2e_i_ = sysconf(84u);
  conv_2e_i_2e_i_ = ((uint32_t )call_2e_i_2e_i_);
  select___PHI = conv_2e_i_2e_i_;   /* for PHI node */
  goto select_done_label;

}
select_done_label: {
  select_ = select___PHI;
  div_n_load_num_load_ = ((int32_t )(((int32_t )n_) / ((int32_t )select_)));
  tmp__41_ = ((uint8_t *)(&ptr_2e_i_));
  call1_2e_i_ = posix_memalign((void **)(&ptr_2e_i_), 64ull, (((int64_t )(int32_t )(select_ << 14u))));
  ptr_val_2e_i_ = *(&ptr_2e_i_);
  new_cast_ptr_ = ((uint32_t *)ptr_val_2e_i_);
  alloc_size6411_ = ((int64_t )(int32_t )(n_ << 3u));
  tmp__42_ = ((uint8_t *)(&ptr_2e_i126_));
  call1_2e_i127_ = posix_memalign((void **)(&ptr_2e_i126_), 64ull, alloc_size6411_);
  ptr_val_2e_i128_ = *(&ptr_2e_i126_);
  new12_cast_ptr_ = ((uint64_t *)ptr_val_2e_i128_);
  tmp__43_ = ((uint8_t *)(&ptr_2e_i129_));
  call1_2e_i130_ = posix_memalign((void **)(&ptr_2e_i129_), 64ull, alloc_size6411_);
  ptr_val_2e_i131_ = *(&ptr_2e_i129_);
  new16_cast_ptr_ = ((uint64_t *)ptr_val_2e_i131_);
  args_ptr_ = ISPCAlloc((&launch_group_handle_), 32ull, 64u);
  *(((uint32_t *)args_ptr_)) = div_n_load_num_load_;
  *(((uint32_t *)((&args_ptr_[((int64_t )4ull)])))) = n_;
  *(((uint32_t **)((&args_ptr_[((int64_t )8ull)])))) = code_;
  *(((uint64_t **)((&args_ptr_[((int64_t )16ull)])))) = new12_cast_ptr_;
  __store<2>((((__vec16_i1 (*))((&args_ptr_[((int64_t )24ull)])))), __mask_);
  ISPCLaunch((&launch_group_handle_), ((uint8_t *)pack___uniuniun_3C_unu_3E_un_3C_unI_3E_), args_ptr_, select_);
  launch_group_handle_load_ = *(&launch_group_handle_);
  if ((launch_group_handle_load_ == ((uint8_t *)/*NULL*/0))) {
    goto for_test_2e_preheader_label;
  } else {
    goto call_sync_label;
  }

}
call_sync_label: {
  ISPCSync(launch_group_handle_load_);
  *(&launch_group_handle_) = ((uint8_t *)/*NULL*/0);
  goto for_test_2e_preheader_label;

}
for_test_2e_preheader_label: {
  args_ptr35132_ = ISPCAlloc((&launch_group_handle_), 40ull, 64u);
  *(((uint32_t *)args_ptr35132_)) = div_n_load_num_load_;
  *(((uint32_t *)((&args_ptr35132_[((int64_t )4ull)])))) = n_;
  *(((uint64_t **)((&args_ptr35132_[((int64_t )8ull)])))) = new12_cast_ptr_;
  funarg39136_ = (&args_ptr35132_[((int64_t )16ull)]);
  funarg39139___PHI = funarg39136_;   /* for PHI node */
  args_ptr35138___PHI = args_ptr35132_;   /* for PHI node */
  storemerge137___PHI = 0u;   /* for PHI node */
  goto for_loop_label;

}
  do {     /* Syntactic loop 'for_loop' to make GCC happy */
for_loop_label: {
  funarg39139_ = funarg39139___PHI;
  args_ptr35138_ = args_ptr35138___PHI;
  storemerge137_ = storemerge137___PHI;
  *(((uint32_t *)funarg39139_)) = storemerge137_;
  *(((uint32_t **)((&args_ptr35138_[((int64_t )24ull)])))) = new_cast_ptr_;
  __store<2>((((__vec16_i1 (*))((&args_ptr35138_[((int64_t )32ull)])))), __mask_);
  ISPCLaunch((&launch_group_handle_), ((uint8_t *)histogram___uniuniun_3C_unI_3E_uniun_3C_uni_3E_), args_ptr35138_, select_);
  launch_group_handle_load44_ = *(&launch_group_handle_);
  if ((launch_group_handle_load44_ == ((uint8_t *)/*NULL*/0))) {
    goto post_sync47_label;
  } else {
    goto call_sync46_label;
  }

}
call_sync46_label: {
  ISPCSync(launch_group_handle_load44_);
  *(&launch_group_handle_) = ((uint8_t *)/*NULL*/0);
  goto post_sync47_label;

}
post_sync47_label: {
  prefix_sum___uniun_3C_uni_3E_(select_, new_cast_ptr_, __mask_);
  args_ptr61_ = ISPCAlloc((&launch_group_handle_), 48ull, 64u);
  *(((uint32_t *)args_ptr61_)) = div_n_load_num_load_;
  *(((uint32_t *)((&args_ptr61_[((int64_t )4ull)])))) = n_;
  *(((uint64_t **)((&args_ptr61_[((int64_t )8ull)])))) = new12_cast_ptr_;
  *(((uint32_t *)((&args_ptr61_[((int64_t )16ull)])))) = storemerge137_;
  *(((uint32_t **)((&args_ptr61_[((int64_t )24ull)])))) = new_cast_ptr_;
  *(((uint64_t **)((&args_ptr61_[((int64_t )32ull)])))) = new16_cast_ptr_;
  __store<2>((((__vec16_i1 (*))((&args_ptr61_[((int64_t )40ull)])))), __mask_);
  ISPCLaunch((&launch_group_handle_), ((uint8_t *)permutation___uniuniun_3C_unI_3E_uniun_3C_uni_3E_un_3C_unI_3E_), args_ptr61_, select_);
  launch_group_handle_load71_ = *(&launch_group_handle_);
  if ((launch_group_handle_load71_ == ((uint8_t *)/*NULL*/0))) {
    goto post_sync74_label;
  } else {
    goto call_sync73_label;
  }

}
call_sync73_label: {
  ISPCSync(launch_group_handle_load71_);
  *(&launch_group_handle_) = ((uint8_t *)/*NULL*/0);
  goto post_sync74_label;

}
post_sync74_label: {
  args_ptr83_ = ISPCAlloc((&launch_group_handle_), 32ull, 64u);
  *(((uint32_t *)args_ptr83_)) = div_n_load_num_load_;
  *(((uint32_t *)((&args_ptr83_[((int64_t )4ull)])))) = n_;
  *(((uint64_t **)((&args_ptr83_[((int64_t )8ull)])))) = new16_cast_ptr_;
  *(((uint64_t **)((&args_ptr83_[((int64_t )16ull)])))) = new12_cast_ptr_;
  __store<2>((((__vec16_i1 (*))((&args_ptr83_[((int64_t )24ull)])))), __mask_);
  ISPCLaunch((&launch_group_handle_), ((uint8_t *)copy___uniuniun_3C_unI_3E_un_3C_unI_3E_), args_ptr83_, select_);
  launch_group_handle_load91_ = *(&launch_group_handle_);
  if ((launch_group_handle_load91_ == ((uint8_t *)/*NULL*/0))) {
    goto post_sync94_label;
  } else {
    goto call_sync93_label;
  }

}
call_sync93_label: {
  ISPCSync(launch_group_handle_load91_);
  *(&launch_group_handle_) = ((uint8_t *)/*NULL*/0);
  goto post_sync94_label;

}
post_sync94_label: {
  pass_load95_plus1_ = ((uint32_t )(((uint32_t )storemerge137_) + ((uint32_t )1u)));
  args_ptr35_ = ISPCAlloc((&launch_group_handle_), 40ull, 64u);
  *(((uint32_t *)args_ptr35_)) = div_n_load_num_load_;
  *(((uint32_t *)((&args_ptr35_[((int64_t )4ull)])))) = n_;
  *(((uint64_t **)((&args_ptr35_[((int64_t )8ull)])))) = new12_cast_ptr_;
  funarg39_ = (&args_ptr35_[((int64_t )16ull)]);
  if ((pass_load95_plus1_ == 4u)) {
    goto for_exit_label;
  } else {
    funarg39139___PHI = funarg39_;   /* for PHI node */
    args_ptr35138___PHI = args_ptr35_;   /* for PHI node */
    storemerge137___PHI = pass_load95_plus1_;   /* for PHI node */
    goto for_loop_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop' */
for_exit_label: {
  *(((uint32_t **)funarg39_)) = code_;
  *(((uint32_t **)((&args_ptr35_[((int64_t )24ull)])))) = order_;
  __store<2>((((__vec16_i1 (*))((&args_ptr35_[((int64_t )32ull)])))), __mask_);
  ISPCLaunch((&launch_group_handle_), ((uint8_t *)unpack___uniuniun_3C_unI_3E_un_3C_unu_3E_un_3C_uni_3E_), args_ptr35_, select_);
  launch_group_handle_load113_ = *(&launch_group_handle_);
  if ((launch_group_handle_load113_ == ((uint8_t *)/*NULL*/0))) {
    goto post_sync116_label;
  } else {
    goto call_sync115_label;
  }

}
call_sync115_label: {
  ISPCSync(launch_group_handle_load113_);
  *(&launch_group_handle_) = ((uint8_t *)/*NULL*/0);
  goto post_sync116_label;

}
post_sync116_label: {
  free(ptr_val_2e_i_);
  free(ptr_val_2e_i128_);
  free(ptr_val_2e_i131_);
  launch_group_handle_load122_ = *(&launch_group_handle_);
  if ((launch_group_handle_load122_ == ((uint8_t *)/*NULL*/0))) {
    goto post_sync125_label;
  } else {
    goto call_sync124_label;
  }

}
call_sync124_label: {
  ISPCSync(launch_group_handle_load122_);
  *(&launch_group_handle_) = ((uint8_t *)/*NULL*/0);
  goto post_sync125_label;

}
post_sync125_label: {
  return;
}
}



void sort_ispc(uint32_t n_, uint32_t *code_, uint32_t *order_, uint32_t ntasks_) {
  uint8_t *ptr_2e_i129_;    /* Address-exposed local */
  uint8_t *ptr_2e_i126_;    /* Address-exposed local */
  uint8_t *ptr_2e_i_;    /* Address-exposed local */
  uint8_t *launch_group_handle_;    /* Address-exposed local */
  uint64_t call_2e_i_2e_i_;
  uint32_t conv_2e_i_2e_i_;
  uint32_t select_;
  uint32_t select___PHI;
  uint32_t div_n_load_num_load_;
  uint8_t *tmp__44_;
  uint32_t call1_2e_i_;
  uint8_t *ptr_val_2e_i_;
  uint32_t *new_cast_ptr_;
  uint64_t alloc_size6411_;
  uint8_t *tmp__45_;
  uint32_t call1_2e_i127_;
  uint8_t *ptr_val_2e_i128_;
  uint64_t *new12_cast_ptr_;
  uint8_t *tmp__46_;
  uint32_t call1_2e_i130_;
  uint8_t *ptr_val_2e_i131_;
  uint64_t *new16_cast_ptr_;
  uint8_t *args_ptr_;
  uint8_t *launch_group_handle_load_;
  uint8_t *args_ptr35132_;
  uint8_t *funarg39136_;
  uint8_t *funarg39139_;
  uint8_t *funarg39139___PHI;
  uint8_t *args_ptr35138_;
  uint8_t *args_ptr35138___PHI;
  uint32_t storemerge137_;
  uint32_t storemerge137___PHI;
  uint8_t *launch_group_handle_load44_;
  uint8_t *launch_group_handle_load113_;
  uint8_t *args_ptr61_;
  uint8_t *launch_group_handle_load71_;
  uint8_t *args_ptr83_;
  uint8_t *launch_group_handle_load91_;
  uint32_t pass_load95_plus1_;
  uint8_t *args_ptr35_;
  uint8_t *funarg39_;
  uint8_t *launch_group_handle_load122_;

  *(&launch_group_handle_) = ((uint8_t *)/*NULL*/0);
  if ((((int32_t )ntasks_) < ((int32_t )1u))) {
    goto select_true_label;
  } else {
    select___PHI = ntasks_;   /* for PHI node */
    goto select_done_label;
  }

select_true_label: {
  call_2e_i_2e_i_ = sysconf(84u);
  conv_2e_i_2e_i_ = ((uint32_t )call_2e_i_2e_i_);
  select___PHI = conv_2e_i_2e_i_;   /* for PHI node */
  goto select_done_label;

}
select_done_label: {
  select_ = select___PHI;
  div_n_load_num_load_ = ((int32_t )(((int32_t )n_) / ((int32_t )select_)));
  tmp__44_ = ((uint8_t *)(&ptr_2e_i_));
  call1_2e_i_ = posix_memalign((void **)(&ptr_2e_i_), 64ull, (((int64_t )(int32_t )(select_ << 14u))));
  ptr_val_2e_i_ = *(&ptr_2e_i_);
  new_cast_ptr_ = ((uint32_t *)ptr_val_2e_i_);
  alloc_size6411_ = ((int64_t )(int32_t )(n_ << 3u));
  tmp__45_ = ((uint8_t *)(&ptr_2e_i126_));
  call1_2e_i127_ = posix_memalign((void **)(&ptr_2e_i126_), 64ull, alloc_size6411_);
  ptr_val_2e_i128_ = *(&ptr_2e_i126_);
  new12_cast_ptr_ = ((uint64_t *)ptr_val_2e_i128_);
  tmp__46_ = ((uint8_t *)(&ptr_2e_i129_));
  call1_2e_i130_ = posix_memalign((void **)(&ptr_2e_i129_), 64ull, alloc_size6411_);
  ptr_val_2e_i131_ = *(&ptr_2e_i129_);
  new16_cast_ptr_ = ((uint64_t *)ptr_val_2e_i131_);
  args_ptr_ = ISPCAlloc((&launch_group_handle_), 32ull, 64u);
  *(((uint32_t *)args_ptr_)) = div_n_load_num_load_;
  *(((uint32_t *)((&args_ptr_[((int64_t )4ull)])))) = n_;
  *(((uint32_t **)((&args_ptr_[((int64_t )8ull)])))) = code_;
  *(((uint64_t **)((&args_ptr_[((int64_t )16ull)])))) = new12_cast_ptr_;
  __store<2>((((__vec16_i1 (*))((&args_ptr_[((int64_t )24ull)])))), __smear_i1<__vec16_i1>(1));
  ISPCLaunch((&launch_group_handle_), ((uint8_t *)pack___uniuniun_3C_unu_3E_un_3C_unI_3E_), args_ptr_, select_);
  launch_group_handle_load_ = *(&launch_group_handle_);
  if ((launch_group_handle_load_ == ((uint8_t *)/*NULL*/0))) {
    goto for_test_2e_preheader_label;
  } else {
    goto call_sync_label;
  }

}
call_sync_label: {
  ISPCSync(launch_group_handle_load_);
  *(&launch_group_handle_) = ((uint8_t *)/*NULL*/0);
  goto for_test_2e_preheader_label;

}
for_test_2e_preheader_label: {
  args_ptr35132_ = ISPCAlloc((&launch_group_handle_), 40ull, 64u);
  *(((uint32_t *)args_ptr35132_)) = div_n_load_num_load_;
  *(((uint32_t *)((&args_ptr35132_[((int64_t )4ull)])))) = n_;
  *(((uint64_t **)((&args_ptr35132_[((int64_t )8ull)])))) = new12_cast_ptr_;
  funarg39136_ = (&args_ptr35132_[((int64_t )16ull)]);
  funarg39139___PHI = funarg39136_;   /* for PHI node */
  args_ptr35138___PHI = args_ptr35132_;   /* for PHI node */
  storemerge137___PHI = 0u;   /* for PHI node */
  goto for_loop_label;

}
  do {     /* Syntactic loop 'for_loop' to make GCC happy */
for_loop_label: {
  funarg39139_ = funarg39139___PHI;
  args_ptr35138_ = args_ptr35138___PHI;
  storemerge137_ = storemerge137___PHI;
  *(((uint32_t *)funarg39139_)) = storemerge137_;
  *(((uint32_t **)((&args_ptr35138_[((int64_t )24ull)])))) = new_cast_ptr_;
  __store<2>((((__vec16_i1 (*))((&args_ptr35138_[((int64_t )32ull)])))), __smear_i1<__vec16_i1>(1));
  ISPCLaunch((&launch_group_handle_), ((uint8_t *)histogram___uniuniun_3C_unI_3E_uniun_3C_uni_3E_), args_ptr35138_, select_);
  launch_group_handle_load44_ = *(&launch_group_handle_);
  if ((launch_group_handle_load44_ == ((uint8_t *)/*NULL*/0))) {
    goto post_sync47_label;
  } else {
    goto call_sync46_label;
  }

}
call_sync46_label: {
  ISPCSync(launch_group_handle_load44_);
  *(&launch_group_handle_) = ((uint8_t *)/*NULL*/0);
  goto post_sync47_label;

}
post_sync47_label: {
  prefix_sum___uniun_3C_uni_3E_(select_, new_cast_ptr_, __smear_i1<__vec16_i1>(1));
  args_ptr61_ = ISPCAlloc((&launch_group_handle_), 48ull, 64u);
  *(((uint32_t *)args_ptr61_)) = div_n_load_num_load_;
  *(((uint32_t *)((&args_ptr61_[((int64_t )4ull)])))) = n_;
  *(((uint64_t **)((&args_ptr61_[((int64_t )8ull)])))) = new12_cast_ptr_;
  *(((uint32_t *)((&args_ptr61_[((int64_t )16ull)])))) = storemerge137_;
  *(((uint32_t **)((&args_ptr61_[((int64_t )24ull)])))) = new_cast_ptr_;
  *(((uint64_t **)((&args_ptr61_[((int64_t )32ull)])))) = new16_cast_ptr_;
  __store<2>((((__vec16_i1 (*))((&args_ptr61_[((int64_t )40ull)])))), __smear_i1<__vec16_i1>(1));
  ISPCLaunch((&launch_group_handle_), ((uint8_t *)permutation___uniuniun_3C_unI_3E_uniun_3C_uni_3E_un_3C_unI_3E_), args_ptr61_, select_);
  launch_group_handle_load71_ = *(&launch_group_handle_);
  if ((launch_group_handle_load71_ == ((uint8_t *)/*NULL*/0))) {
    goto post_sync74_label;
  } else {
    goto call_sync73_label;
  }

}
call_sync73_label: {
  ISPCSync(launch_group_handle_load71_);
  *(&launch_group_handle_) = ((uint8_t *)/*NULL*/0);
  goto post_sync74_label;

}
post_sync74_label: {
  args_ptr83_ = ISPCAlloc((&launch_group_handle_), 32ull, 64u);
  *(((uint32_t *)args_ptr83_)) = div_n_load_num_load_;
  *(((uint32_t *)((&args_ptr83_[((int64_t )4ull)])))) = n_;
  *(((uint64_t **)((&args_ptr83_[((int64_t )8ull)])))) = new16_cast_ptr_;
  *(((uint64_t **)((&args_ptr83_[((int64_t )16ull)])))) = new12_cast_ptr_;
  __store<2>((((__vec16_i1 (*))((&args_ptr83_[((int64_t )24ull)])))), __smear_i1<__vec16_i1>(1));
  ISPCLaunch((&launch_group_handle_), ((uint8_t *)copy___uniuniun_3C_unI_3E_un_3C_unI_3E_), args_ptr83_, select_);
  launch_group_handle_load91_ = *(&launch_group_handle_);
  if ((launch_group_handle_load91_ == ((uint8_t *)/*NULL*/0))) {
    goto post_sync94_label;
  } else {
    goto call_sync93_label;
  }

}
call_sync93_label: {
  ISPCSync(launch_group_handle_load91_);
  *(&launch_group_handle_) = ((uint8_t *)/*NULL*/0);
  goto post_sync94_label;

}
post_sync94_label: {
  pass_load95_plus1_ = ((uint32_t )(((uint32_t )storemerge137_) + ((uint32_t )1u)));
  args_ptr35_ = ISPCAlloc((&launch_group_handle_), 40ull, 64u);
  *(((uint32_t *)args_ptr35_)) = div_n_load_num_load_;
  *(((uint32_t *)((&args_ptr35_[((int64_t )4ull)])))) = n_;
  *(((uint64_t **)((&args_ptr35_[((int64_t )8ull)])))) = new12_cast_ptr_;
  funarg39_ = (&args_ptr35_[((int64_t )16ull)]);
  if ((pass_load95_plus1_ == 4u)) {
    goto for_exit_label;
  } else {
    funarg39139___PHI = funarg39_;   /* for PHI node */
    args_ptr35138___PHI = args_ptr35_;   /* for PHI node */
    storemerge137___PHI = pass_load95_plus1_;   /* for PHI node */
    goto for_loop_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop' */
for_exit_label: {
  *(((uint32_t **)funarg39_)) = code_;
  *(((uint32_t **)((&args_ptr35_[((int64_t )24ull)])))) = order_;
  __store<2>((((__vec16_i1 (*))((&args_ptr35_[((int64_t )32ull)])))), __smear_i1<__vec16_i1>(1));
  ISPCLaunch((&launch_group_handle_), ((uint8_t *)unpack___uniuniun_3C_unI_3E_un_3C_unu_3E_un_3C_uni_3E_), args_ptr35_, select_);
  launch_group_handle_load113_ = *(&launch_group_handle_);
  if ((launch_group_handle_load113_ == ((uint8_t *)/*NULL*/0))) {
    goto post_sync116_label;
  } else {
    goto call_sync115_label;
  }

}
call_sync115_label: {
  ISPCSync(launch_group_handle_load113_);
  *(&launch_group_handle_) = ((uint8_t *)/*NULL*/0);
  goto post_sync116_label;

}
post_sync116_label: {
  free(ptr_val_2e_i_);
  free(ptr_val_2e_i128_);
  free(ptr_val_2e_i131_);
  launch_group_handle_load122_ = *(&launch_group_handle_);
  if ((launch_group_handle_load122_ == ((uint8_t *)/*NULL*/0))) {
    goto post_sync125_label;
  } else {
    goto call_sync124_label;
  }

}
call_sync124_label: {
  ISPCSync(launch_group_handle_load122_);
  *(&launch_group_handle_) = ((uint8_t *)/*NULL*/0);
  goto post_sync125_label;

}
post_sync125_label: {
  return;
}
}

