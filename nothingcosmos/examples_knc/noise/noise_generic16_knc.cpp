/*******************************************************************
  This file has been automatically generated by ispc
  DO NOT EDIT THIS FILE DIRECTLY
 *******************************************************************/

/* Provide Declarations */
#include <stdarg.h>
#include <setjmp.h>
#include <limits.h>
#include <stdlib.h>
#ifdef _MSC_VER
  #define NOMINMAX
  #include <windows.h>
#endif // _MSC_VER
#include <stdlib.h>
#include <stdint.h>
/* get a declaration for alloca */
#ifdef _MSC_VER
  #include <malloc.h>
  #define alloca _alloca
#else
  #include <alloca.h>
#endif

#undef ISPC_FAST_MATH
#include "knc.h"

/* Basic Library Function Declarations */
extern "C" {
int puts(unsigned char *);
unsigned int putchar(unsigned int);
int fflush(void *);
int printf(const unsigned char *, ...);
uint8_t *memcpy(uint8_t *, uint8_t *, uint64_t );
uint8_t *memset(uint8_t *, uint8_t, uint64_t );
void memset_pattern16(void *, const void *, uint64_t );
}

#ifndef __GNUC__  /* Can only support "linkonce" vars with GCC */
#define __attribute__(X)
#endif

#if defined(__GNUC__) && defined(__APPLE_CC__)
#define __EXTERNAL_WEAK__ __attribute__((weak_import))
#elif defined(__GNUC__)
#define __EXTERNAL_WEAK__ __attribute__((weak))
#else
#define __EXTERNAL_WEAK__
#endif

#if defined(__GNUC__) && defined(__APPLE_CC__)
#define __ATTRIBUTE_WEAK__
#elif defined(__GNUC__)
#define __ATTRIBUTE_WEAK__ __attribute__((weak))
#else
#define __ATTRIBUTE_WEAK__
#endif

#if defined(__GNUC__)
#define __HIDDEN__ __attribute__((visibility("hidden")))
#endif

#if (defined(__GNUC__) || defined(__clang__)) && !defined(__INTEL_COMPILER)
#define LLVM_NAN(NanStr)   __builtin_nan(NanStr)   /* Double */
#define LLVM_NANF(NanStr)  __builtin_nanf(NanStr)  /* Float */
#define LLVM_NANS(NanStr)  __builtin_nans(NanStr)  /* Double */
#define LLVM_NANSF(NanStr) __builtin_nansf(NanStr) /* Float */
#define LLVM_INF           __builtin_inf()         /* Double */
#define LLVM_INFF          __builtin_inff()        /* Float */
//#define LLVM_PREFETCH(addr,rw,locality) __builtin_prefetch(addr,rw,locality)
//#define __ATTRIBUTE_CTOR__ __attribute__((constructor))
//#define __ATTRIBUTE_DTOR__ __attribute__((destructor))
#elif defined(_MSC_VER) || defined(__INTEL_COMPILER)
#include <limits>
#define LLVM_NAN(NanStr)   std::numeric_limits<double>::quiet_NaN()
#define LLVM_NANF(NanStr)  std::numeric_limits<float>::quiet_NaN()
#define LLVM_NANS(NanStr)  std::numeric_limits<double>::signaling_NaN()
#define LLVM_NANSF(NanStr) std::numeric_limits<float>::signaling_NaN()
#define LLVM_INF           std::numeric_limits<double>::infinity()
#define LLVM_INFF          std::numeric_limits<float>::infinity()
//#define LLVM_PREFETCH(addr,rw,locality)            /* PREFETCH */
//#define __ATTRIBUTE_CTOR__
//#define __ATTRIBUTE_DTOR__
#else
#error "Not MSVC, clang, or g++?"
#endif

#if (defined(__GNUC__) || defined(__clang__))
#define LLVM_ASM(X) __asm(X)
#endif

#if defined(__clang__) || defined(__INTEL_COMPILER) || (__GNUC__ < 4) /* Old GCCs, or compilers not GCC */ 
#define __builtin_stack_save() 0   /* not implemented */
#define __builtin_stack_restore(X) /* noop */
#endif

#define CODE_FOR_MAIN() /* Any target-specific code for main()*/

#ifndef __cplusplus
typedef unsigned char bool;
#endif


/* Support for floating point constants */
typedef uint64_t ConstantDoubleTy;
typedef uint32_t ConstantFloatTy;
typedef struct { unsigned long long f1; unsigned short f2; unsigned short pad[3]; } ConstantFP80Ty;
typedef struct { uint64_t f1, f2; } ConstantFP128Ty;


/* Global Declarations */


/* Helper union for bitcasts */
typedef union {
  unsigned int Int32;
  unsigned long long Int64;
  float Float;
  double Double;
} llvmBitCastUnion;
/* Structure and array forward declarations */
struct l_array_0;

/* Structure and array contents */
struct l_array_0 {
  static l_array_0 init(uint32_t v0, uint32_t v1, uint32_t v2, uint32_t v3, uint32_t v4, uint32_t v5, uint32_t v6, uint32_t v7, uint32_t v8, uint32_t v9, uint32_t v10, uint32_t v11, uint32_t v12, uint32_t v13, uint32_t v14, uint32_t v15, uint32_t v16, uint32_t v17, uint32_t v18, uint32_t v19, uint32_t v20, uint32_t v21, uint32_t v22, uint32_t v23, uint32_t v24, uint32_t v25, uint32_t v26, uint32_t v27, uint32_t v28, uint32_t v29, uint32_t v30, uint32_t v31, uint32_t v32, uint32_t v33, uint32_t v34, uint32_t v35, uint32_t v36, uint32_t v37, uint32_t v38, uint32_t v39, uint32_t v40, uint32_t v41, uint32_t v42, uint32_t v43, uint32_t v44, uint32_t v45, uint32_t v46, uint32_t v47, uint32_t v48, uint32_t v49, uint32_t v50, uint32_t v51, uint32_t v52, uint32_t v53, uint32_t v54, uint32_t v55, uint32_t v56, uint32_t v57, uint32_t v58, uint32_t v59, uint32_t v60, uint32_t v61, uint32_t v62, uint32_t v63, uint32_t v64, uint32_t v65, uint32_t v66, uint32_t v67, uint32_t v68, uint32_t v69, uint32_t v70, uint32_t v71, uint32_t v72, uint32_t v73, uint32_t v74, uint32_t v75, uint32_t v76, uint32_t v77, uint32_t v78, uint32_t v79, uint32_t v80, uint32_t v81, uint32_t v82, uint32_t v83, uint32_t v84, uint32_t v85, uint32_t v86, uint32_t v87, uint32_t v88, uint32_t v89, uint32_t v90, uint32_t v91, uint32_t v92, uint32_t v93, uint32_t v94, uint32_t v95, uint32_t v96, uint32_t v97, uint32_t v98, uint32_t v99, uint32_t v100, uint32_t v101, uint32_t v102, uint32_t v103, uint32_t v104, uint32_t v105, uint32_t v106, uint32_t v107, uint32_t v108, uint32_t v109, uint32_t v110, uint32_t v111, uint32_t v112, uint32_t v113, uint32_t v114, uint32_t v115, uint32_t v116, uint32_t v117, uint32_t v118, uint32_t v119, uint32_t v120, uint32_t v121, uint32_t v122, uint32_t v123, uint32_t v124, uint32_t v125, uint32_t v126, uint32_t v127, uint32_t v128, uint32_t v129, uint32_t v130, uint32_t v131, uint32_t v132, uint32_t v133, uint32_t v134, uint32_t v135, uint32_t v136, uint32_t v137, uint32_t v138, uint32_t v139, uint32_t v140, uint32_t v141, uint32_t v142, uint32_t v143, uint32_t v144, uint32_t v145, uint32_t v146, uint32_t v147, uint32_t v148, uint32_t v149, uint32_t v150, uint32_t v151, uint32_t v152, uint32_t v153, uint32_t v154, uint32_t v155, uint32_t v156, uint32_t v157, uint32_t v158, uint32_t v159, uint32_t v160, uint32_t v161, uint32_t v162, uint32_t v163, uint32_t v164, uint32_t v165, uint32_t v166, uint32_t v167, uint32_t v168, uint32_t v169, uint32_t v170, uint32_t v171, uint32_t v172, uint32_t v173, uint32_t v174, uint32_t v175, uint32_t v176, uint32_t v177, uint32_t v178, uint32_t v179, uint32_t v180, uint32_t v181, uint32_t v182, uint32_t v183, uint32_t v184, uint32_t v185, uint32_t v186, uint32_t v187, uint32_t v188, uint32_t v189, uint32_t v190, uint32_t v191, uint32_t v192, uint32_t v193, uint32_t v194, uint32_t v195, uint32_t v196, uint32_t v197, uint32_t v198, uint32_t v199, uint32_t v200, uint32_t v201, uint32_t v202, uint32_t v203, uint32_t v204, uint32_t v205, uint32_t v206, uint32_t v207, uint32_t v208, uint32_t v209, uint32_t v210, uint32_t v211, uint32_t v212, uint32_t v213, uint32_t v214, uint32_t v215, uint32_t v216, uint32_t v217, uint32_t v218, uint32_t v219, uint32_t v220, uint32_t v221, uint32_t v222, uint32_t v223, uint32_t v224, uint32_t v225, uint32_t v226, uint32_t v227, uint32_t v228, uint32_t v229, uint32_t v230, uint32_t v231, uint32_t v232, uint32_t v233, uint32_t v234, uint32_t v235, uint32_t v236, uint32_t v237, uint32_t v238, uint32_t v239, uint32_t v240, uint32_t v241, uint32_t v242, uint32_t v243, uint32_t v244, uint32_t v245, uint32_t v246, uint32_t v247, uint32_t v248, uint32_t v249, uint32_t v250, uint32_t v251, uint32_t v252, uint32_t v253, uint32_t v254, uint32_t v255, uint32_t v256, uint32_t v257, uint32_t v258, uint32_t v259, uint32_t v260, uint32_t v261, uint32_t v262, uint32_t v263, uint32_t v264, uint32_t v265, uint32_t v266, uint32_t v267, uint32_t v268, uint32_t v269, uint32_t v270, uint32_t v271, uint32_t v272, uint32_t v273, uint32_t v274, uint32_t v275, uint32_t v276, uint32_t v277, uint32_t v278, uint32_t v279, uint32_t v280, uint32_t v281, uint32_t v282, uint32_t v283, uint32_t v284, uint32_t v285, uint32_t v286, uint32_t v287, uint32_t v288, uint32_t v289, uint32_t v290, uint32_t v291, uint32_t v292, uint32_t v293, uint32_t v294, uint32_t v295, uint32_t v296, uint32_t v297, uint32_t v298, uint32_t v299, uint32_t v300, uint32_t v301, uint32_t v302, uint32_t v303, uint32_t v304, uint32_t v305, uint32_t v306, uint32_t v307, uint32_t v308, uint32_t v309, uint32_t v310, uint32_t v311, uint32_t v312, uint32_t v313, uint32_t v314, uint32_t v315, uint32_t v316, uint32_t v317, uint32_t v318, uint32_t v319, uint32_t v320, uint32_t v321, uint32_t v322, uint32_t v323, uint32_t v324, uint32_t v325, uint32_t v326, uint32_t v327, uint32_t v328, uint32_t v329, uint32_t v330, uint32_t v331, uint32_t v332, uint32_t v333, uint32_t v334, uint32_t v335, uint32_t v336, uint32_t v337, uint32_t v338, uint32_t v339, uint32_t v340, uint32_t v341, uint32_t v342, uint32_t v343, uint32_t v344, uint32_t v345, uint32_t v346, uint32_t v347, uint32_t v348, uint32_t v349, uint32_t v350, uint32_t v351, uint32_t v352, uint32_t v353, uint32_t v354, uint32_t v355, uint32_t v356, uint32_t v357, uint32_t v358, uint32_t v359, uint32_t v360, uint32_t v361, uint32_t v362, uint32_t v363, uint32_t v364, uint32_t v365, uint32_t v366, uint32_t v367, uint32_t v368, uint32_t v369, uint32_t v370, uint32_t v371, uint32_t v372, uint32_t v373, uint32_t v374, uint32_t v375, uint32_t v376, uint32_t v377, uint32_t v378, uint32_t v379, uint32_t v380, uint32_t v381, uint32_t v382, uint32_t v383, uint32_t v384, uint32_t v385, uint32_t v386, uint32_t v387, uint32_t v388, uint32_t v389, uint32_t v390, uint32_t v391, uint32_t v392, uint32_t v393, uint32_t v394, uint32_t v395, uint32_t v396, uint32_t v397, uint32_t v398, uint32_t v399, uint32_t v400, uint32_t v401, uint32_t v402, uint32_t v403, uint32_t v404, uint32_t v405, uint32_t v406, uint32_t v407, uint32_t v408, uint32_t v409, uint32_t v410, uint32_t v411, uint32_t v412, uint32_t v413, uint32_t v414, uint32_t v415, uint32_t v416, uint32_t v417, uint32_t v418, uint32_t v419, uint32_t v420, uint32_t v421, uint32_t v422, uint32_t v423, uint32_t v424, uint32_t v425, uint32_t v426, uint32_t v427, uint32_t v428, uint32_t v429, uint32_t v430, uint32_t v431, uint32_t v432, uint32_t v433, uint32_t v434, uint32_t v435, uint32_t v436, uint32_t v437, uint32_t v438, uint32_t v439, uint32_t v440, uint32_t v441, uint32_t v442, uint32_t v443, uint32_t v444, uint32_t v445, uint32_t v446, uint32_t v447, uint32_t v448, uint32_t v449, uint32_t v450, uint32_t v451, uint32_t v452, uint32_t v453, uint32_t v454, uint32_t v455, uint32_t v456, uint32_t v457, uint32_t v458, uint32_t v459, uint32_t v460, uint32_t v461, uint32_t v462, uint32_t v463, uint32_t v464, uint32_t v465, uint32_t v466, uint32_t v467, uint32_t v468, uint32_t v469, uint32_t v470, uint32_t v471, uint32_t v472, uint32_t v473, uint32_t v474, uint32_t v475, uint32_t v476, uint32_t v477, uint32_t v478, uint32_t v479, uint32_t v480, uint32_t v481, uint32_t v482, uint32_t v483, uint32_t v484, uint32_t v485, uint32_t v486, uint32_t v487, uint32_t v488, uint32_t v489, uint32_t v490, uint32_t v491, uint32_t v492, uint32_t v493, uint32_t v494, uint32_t v495, uint32_t v496, uint32_t v497, uint32_t v498, uint32_t v499, uint32_t v500, uint32_t v501, uint32_t v502, uint32_t v503, uint32_t v504, uint32_t v505, uint32_t v506, uint32_t v507, uint32_t v508, uint32_t v509, uint32_t v510, uint32_t v511) {
    l_array_0 ret;
    ret.array[0] = v0;
    ret.array[1] = v1;
    ret.array[2] = v2;
    ret.array[3] = v3;
    ret.array[4] = v4;
    ret.array[5] = v5;
    ret.array[6] = v6;
    ret.array[7] = v7;
    ret.array[8] = v8;
    ret.array[9] = v9;
    ret.array[10] = v10;
    ret.array[11] = v11;
    ret.array[12] = v12;
    ret.array[13] = v13;
    ret.array[14] = v14;
    ret.array[15] = v15;
    ret.array[16] = v16;
    ret.array[17] = v17;
    ret.array[18] = v18;
    ret.array[19] = v19;
    ret.array[20] = v20;
    ret.array[21] = v21;
    ret.array[22] = v22;
    ret.array[23] = v23;
    ret.array[24] = v24;
    ret.array[25] = v25;
    ret.array[26] = v26;
    ret.array[27] = v27;
    ret.array[28] = v28;
    ret.array[29] = v29;
    ret.array[30] = v30;
    ret.array[31] = v31;
    ret.array[32] = v32;
    ret.array[33] = v33;
    ret.array[34] = v34;
    ret.array[35] = v35;
    ret.array[36] = v36;
    ret.array[37] = v37;
    ret.array[38] = v38;
    ret.array[39] = v39;
    ret.array[40] = v40;
    ret.array[41] = v41;
    ret.array[42] = v42;
    ret.array[43] = v43;
    ret.array[44] = v44;
    ret.array[45] = v45;
    ret.array[46] = v46;
    ret.array[47] = v47;
    ret.array[48] = v48;
    ret.array[49] = v49;
    ret.array[50] = v50;
    ret.array[51] = v51;
    ret.array[52] = v52;
    ret.array[53] = v53;
    ret.array[54] = v54;
    ret.array[55] = v55;
    ret.array[56] = v56;
    ret.array[57] = v57;
    ret.array[58] = v58;
    ret.array[59] = v59;
    ret.array[60] = v60;
    ret.array[61] = v61;
    ret.array[62] = v62;
    ret.array[63] = v63;
    ret.array[64] = v64;
    ret.array[65] = v65;
    ret.array[66] = v66;
    ret.array[67] = v67;
    ret.array[68] = v68;
    ret.array[69] = v69;
    ret.array[70] = v70;
    ret.array[71] = v71;
    ret.array[72] = v72;
    ret.array[73] = v73;
    ret.array[74] = v74;
    ret.array[75] = v75;
    ret.array[76] = v76;
    ret.array[77] = v77;
    ret.array[78] = v78;
    ret.array[79] = v79;
    ret.array[80] = v80;
    ret.array[81] = v81;
    ret.array[82] = v82;
    ret.array[83] = v83;
    ret.array[84] = v84;
    ret.array[85] = v85;
    ret.array[86] = v86;
    ret.array[87] = v87;
    ret.array[88] = v88;
    ret.array[89] = v89;
    ret.array[90] = v90;
    ret.array[91] = v91;
    ret.array[92] = v92;
    ret.array[93] = v93;
    ret.array[94] = v94;
    ret.array[95] = v95;
    ret.array[96] = v96;
    ret.array[97] = v97;
    ret.array[98] = v98;
    ret.array[99] = v99;
    ret.array[100] = v100;
    ret.array[101] = v101;
    ret.array[102] = v102;
    ret.array[103] = v103;
    ret.array[104] = v104;
    ret.array[105] = v105;
    ret.array[106] = v106;
    ret.array[107] = v107;
    ret.array[108] = v108;
    ret.array[109] = v109;
    ret.array[110] = v110;
    ret.array[111] = v111;
    ret.array[112] = v112;
    ret.array[113] = v113;
    ret.array[114] = v114;
    ret.array[115] = v115;
    ret.array[116] = v116;
    ret.array[117] = v117;
    ret.array[118] = v118;
    ret.array[119] = v119;
    ret.array[120] = v120;
    ret.array[121] = v121;
    ret.array[122] = v122;
    ret.array[123] = v123;
    ret.array[124] = v124;
    ret.array[125] = v125;
    ret.array[126] = v126;
    ret.array[127] = v127;
    ret.array[128] = v128;
    ret.array[129] = v129;
    ret.array[130] = v130;
    ret.array[131] = v131;
    ret.array[132] = v132;
    ret.array[133] = v133;
    ret.array[134] = v134;
    ret.array[135] = v135;
    ret.array[136] = v136;
    ret.array[137] = v137;
    ret.array[138] = v138;
    ret.array[139] = v139;
    ret.array[140] = v140;
    ret.array[141] = v141;
    ret.array[142] = v142;
    ret.array[143] = v143;
    ret.array[144] = v144;
    ret.array[145] = v145;
    ret.array[146] = v146;
    ret.array[147] = v147;
    ret.array[148] = v148;
    ret.array[149] = v149;
    ret.array[150] = v150;
    ret.array[151] = v151;
    ret.array[152] = v152;
    ret.array[153] = v153;
    ret.array[154] = v154;
    ret.array[155] = v155;
    ret.array[156] = v156;
    ret.array[157] = v157;
    ret.array[158] = v158;
    ret.array[159] = v159;
    ret.array[160] = v160;
    ret.array[161] = v161;
    ret.array[162] = v162;
    ret.array[163] = v163;
    ret.array[164] = v164;
    ret.array[165] = v165;
    ret.array[166] = v166;
    ret.array[167] = v167;
    ret.array[168] = v168;
    ret.array[169] = v169;
    ret.array[170] = v170;
    ret.array[171] = v171;
    ret.array[172] = v172;
    ret.array[173] = v173;
    ret.array[174] = v174;
    ret.array[175] = v175;
    ret.array[176] = v176;
    ret.array[177] = v177;
    ret.array[178] = v178;
    ret.array[179] = v179;
    ret.array[180] = v180;
    ret.array[181] = v181;
    ret.array[182] = v182;
    ret.array[183] = v183;
    ret.array[184] = v184;
    ret.array[185] = v185;
    ret.array[186] = v186;
    ret.array[187] = v187;
    ret.array[188] = v188;
    ret.array[189] = v189;
    ret.array[190] = v190;
    ret.array[191] = v191;
    ret.array[192] = v192;
    ret.array[193] = v193;
    ret.array[194] = v194;
    ret.array[195] = v195;
    ret.array[196] = v196;
    ret.array[197] = v197;
    ret.array[198] = v198;
    ret.array[199] = v199;
    ret.array[200] = v200;
    ret.array[201] = v201;
    ret.array[202] = v202;
    ret.array[203] = v203;
    ret.array[204] = v204;
    ret.array[205] = v205;
    ret.array[206] = v206;
    ret.array[207] = v207;
    ret.array[208] = v208;
    ret.array[209] = v209;
    ret.array[210] = v210;
    ret.array[211] = v211;
    ret.array[212] = v212;
    ret.array[213] = v213;
    ret.array[214] = v214;
    ret.array[215] = v215;
    ret.array[216] = v216;
    ret.array[217] = v217;
    ret.array[218] = v218;
    ret.array[219] = v219;
    ret.array[220] = v220;
    ret.array[221] = v221;
    ret.array[222] = v222;
    ret.array[223] = v223;
    ret.array[224] = v224;
    ret.array[225] = v225;
    ret.array[226] = v226;
    ret.array[227] = v227;
    ret.array[228] = v228;
    ret.array[229] = v229;
    ret.array[230] = v230;
    ret.array[231] = v231;
    ret.array[232] = v232;
    ret.array[233] = v233;
    ret.array[234] = v234;
    ret.array[235] = v235;
    ret.array[236] = v236;
    ret.array[237] = v237;
    ret.array[238] = v238;
    ret.array[239] = v239;
    ret.array[240] = v240;
    ret.array[241] = v241;
    ret.array[242] = v242;
    ret.array[243] = v243;
    ret.array[244] = v244;
    ret.array[245] = v245;
    ret.array[246] = v246;
    ret.array[247] = v247;
    ret.array[248] = v248;
    ret.array[249] = v249;
    ret.array[250] = v250;
    ret.array[251] = v251;
    ret.array[252] = v252;
    ret.array[253] = v253;
    ret.array[254] = v254;
    ret.array[255] = v255;
    ret.array[256] = v256;
    ret.array[257] = v257;
    ret.array[258] = v258;
    ret.array[259] = v259;
    ret.array[260] = v260;
    ret.array[261] = v261;
    ret.array[262] = v262;
    ret.array[263] = v263;
    ret.array[264] = v264;
    ret.array[265] = v265;
    ret.array[266] = v266;
    ret.array[267] = v267;
    ret.array[268] = v268;
    ret.array[269] = v269;
    ret.array[270] = v270;
    ret.array[271] = v271;
    ret.array[272] = v272;
    ret.array[273] = v273;
    ret.array[274] = v274;
    ret.array[275] = v275;
    ret.array[276] = v276;
    ret.array[277] = v277;
    ret.array[278] = v278;
    ret.array[279] = v279;
    ret.array[280] = v280;
    ret.array[281] = v281;
    ret.array[282] = v282;
    ret.array[283] = v283;
    ret.array[284] = v284;
    ret.array[285] = v285;
    ret.array[286] = v286;
    ret.array[287] = v287;
    ret.array[288] = v288;
    ret.array[289] = v289;
    ret.array[290] = v290;
    ret.array[291] = v291;
    ret.array[292] = v292;
    ret.array[293] = v293;
    ret.array[294] = v294;
    ret.array[295] = v295;
    ret.array[296] = v296;
    ret.array[297] = v297;
    ret.array[298] = v298;
    ret.array[299] = v299;
    ret.array[300] = v300;
    ret.array[301] = v301;
    ret.array[302] = v302;
    ret.array[303] = v303;
    ret.array[304] = v304;
    ret.array[305] = v305;
    ret.array[306] = v306;
    ret.array[307] = v307;
    ret.array[308] = v308;
    ret.array[309] = v309;
    ret.array[310] = v310;
    ret.array[311] = v311;
    ret.array[312] = v312;
    ret.array[313] = v313;
    ret.array[314] = v314;
    ret.array[315] = v315;
    ret.array[316] = v316;
    ret.array[317] = v317;
    ret.array[318] = v318;
    ret.array[319] = v319;
    ret.array[320] = v320;
    ret.array[321] = v321;
    ret.array[322] = v322;
    ret.array[323] = v323;
    ret.array[324] = v324;
    ret.array[325] = v325;
    ret.array[326] = v326;
    ret.array[327] = v327;
    ret.array[328] = v328;
    ret.array[329] = v329;
    ret.array[330] = v330;
    ret.array[331] = v331;
    ret.array[332] = v332;
    ret.array[333] = v333;
    ret.array[334] = v334;
    ret.array[335] = v335;
    ret.array[336] = v336;
    ret.array[337] = v337;
    ret.array[338] = v338;
    ret.array[339] = v339;
    ret.array[340] = v340;
    ret.array[341] = v341;
    ret.array[342] = v342;
    ret.array[343] = v343;
    ret.array[344] = v344;
    ret.array[345] = v345;
    ret.array[346] = v346;
    ret.array[347] = v347;
    ret.array[348] = v348;
    ret.array[349] = v349;
    ret.array[350] = v350;
    ret.array[351] = v351;
    ret.array[352] = v352;
    ret.array[353] = v353;
    ret.array[354] = v354;
    ret.array[355] = v355;
    ret.array[356] = v356;
    ret.array[357] = v357;
    ret.array[358] = v358;
    ret.array[359] = v359;
    ret.array[360] = v360;
    ret.array[361] = v361;
    ret.array[362] = v362;
    ret.array[363] = v363;
    ret.array[364] = v364;
    ret.array[365] = v365;
    ret.array[366] = v366;
    ret.array[367] = v367;
    ret.array[368] = v368;
    ret.array[369] = v369;
    ret.array[370] = v370;
    ret.array[371] = v371;
    ret.array[372] = v372;
    ret.array[373] = v373;
    ret.array[374] = v374;
    ret.array[375] = v375;
    ret.array[376] = v376;
    ret.array[377] = v377;
    ret.array[378] = v378;
    ret.array[379] = v379;
    ret.array[380] = v380;
    ret.array[381] = v381;
    ret.array[382] = v382;
    ret.array[383] = v383;
    ret.array[384] = v384;
    ret.array[385] = v385;
    ret.array[386] = v386;
    ret.array[387] = v387;
    ret.array[388] = v388;
    ret.array[389] = v389;
    ret.array[390] = v390;
    ret.array[391] = v391;
    ret.array[392] = v392;
    ret.array[393] = v393;
    ret.array[394] = v394;
    ret.array[395] = v395;
    ret.array[396] = v396;
    ret.array[397] = v397;
    ret.array[398] = v398;
    ret.array[399] = v399;
    ret.array[400] = v400;
    ret.array[401] = v401;
    ret.array[402] = v402;
    ret.array[403] = v403;
    ret.array[404] = v404;
    ret.array[405] = v405;
    ret.array[406] = v406;
    ret.array[407] = v407;
    ret.array[408] = v408;
    ret.array[409] = v409;
    ret.array[410] = v410;
    ret.array[411] = v411;
    ret.array[412] = v412;
    ret.array[413] = v413;
    ret.array[414] = v414;
    ret.array[415] = v415;
    ret.array[416] = v416;
    ret.array[417] = v417;
    ret.array[418] = v418;
    ret.array[419] = v419;
    ret.array[420] = v420;
    ret.array[421] = v421;
    ret.array[422] = v422;
    ret.array[423] = v423;
    ret.array[424] = v424;
    ret.array[425] = v425;
    ret.array[426] = v426;
    ret.array[427] = v427;
    ret.array[428] = v428;
    ret.array[429] = v429;
    ret.array[430] = v430;
    ret.array[431] = v431;
    ret.array[432] = v432;
    ret.array[433] = v433;
    ret.array[434] = v434;
    ret.array[435] = v435;
    ret.array[436] = v436;
    ret.array[437] = v437;
    ret.array[438] = v438;
    ret.array[439] = v439;
    ret.array[440] = v440;
    ret.array[441] = v441;
    ret.array[442] = v442;
    ret.array[443] = v443;
    ret.array[444] = v444;
    ret.array[445] = v445;
    ret.array[446] = v446;
    ret.array[447] = v447;
    ret.array[448] = v448;
    ret.array[449] = v449;
    ret.array[450] = v450;
    ret.array[451] = v451;
    ret.array[452] = v452;
    ret.array[453] = v453;
    ret.array[454] = v454;
    ret.array[455] = v455;
    ret.array[456] = v456;
    ret.array[457] = v457;
    ret.array[458] = v458;
    ret.array[459] = v459;
    ret.array[460] = v460;
    ret.array[461] = v461;
    ret.array[462] = v462;
    ret.array[463] = v463;
    ret.array[464] = v464;
    ret.array[465] = v465;
    ret.array[466] = v466;
    ret.array[467] = v467;
    ret.array[468] = v468;
    ret.array[469] = v469;
    ret.array[470] = v470;
    ret.array[471] = v471;
    ret.array[472] = v472;
    ret.array[473] = v473;
    ret.array[474] = v474;
    ret.array[475] = v475;
    ret.array[476] = v476;
    ret.array[477] = v477;
    ret.array[478] = v478;
    ret.array[479] = v479;
    ret.array[480] = v480;
    ret.array[481] = v481;
    ret.array[482] = v482;
    ret.array[483] = v483;
    ret.array[484] = v484;
    ret.array[485] = v485;
    ret.array[486] = v486;
    ret.array[487] = v487;
    ret.array[488] = v488;
    ret.array[489] = v489;
    ret.array[490] = v490;
    ret.array[491] = v491;
    ret.array[492] = v492;
    ret.array[493] = v493;
    ret.array[494] = v494;
    ret.array[495] = v495;
    ret.array[496] = v496;
    ret.array[497] = v497;
    ret.array[498] = v498;
    ret.array[499] = v499;
    ret.array[500] = v500;
    ret.array[501] = v501;
    ret.array[502] = v502;
    ret.array[503] = v503;
    ret.array[504] = v504;
    ret.array[505] = v505;
    ret.array[506] = v506;
    ret.array[507] = v507;
    ret.array[508] = v508;
    ret.array[509] = v509;
    ret.array[510] = v510;
    ret.array[511] = v511;
    return ret;
  }
  uint32_t array[512];
} ;



/* External Global Variable Declarations */


/* Global Variable Declarations */

/* Function Declarations */
extern "C" {
static __vec16_f Turbulence___vyfvyfvyfuni(__vec16_f x_, __vec16_f y_, __vec16_i1 __mask_);
void noise_ispc___unfunfunfunfuniuniun_3C_unf_3E_(float x0_, float y0_, float x1_, float y1_, uint32_t width_, uint32_t height_, float *output_, __vec16_i1 __mask_);
void noise_ispc(float x0_, float y0_, float x1_, float y1_, uint32_t width_, uint32_t height_, float *output_);
}



/* Function Bodies */
template <typename A, typename B> static inline int llvm_fcmp_ord(A X, B Y) { return X == X && Y == Y; }
template <typename A, typename B> static inline int llvm_fcmp_uno(A X, B Y) { return X != X || Y != Y; }
template <typename A, typename B> static inline int llvm_fcmp_ueq(A X, B Y) { return X == Y || llvm_fcmp_uno(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_une(A X, B Y) { return X != Y; }
template <typename A, typename B> static inline int llvm_fcmp_ult(A X, B Y) { return X <  Y || llvm_fcmp_uno(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_ugt(A X, B Y) { return X >  Y || llvm_fcmp_uno(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_ule(A X, B Y) { return X <= Y || llvm_fcmp_uno(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_uge(A X, B Y) { return X >= Y || llvm_fcmp_uno(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_oeq(A X, B Y) { return X == Y ; }
template <typename A, typename B> static inline int llvm_fcmp_one(A X, B Y) { return X != Y && llvm_fcmp_ord(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_olt(A X, B Y) { return X <  Y ; }
template <typename A, typename B> static inline int llvm_fcmp_ogt(A X, B Y) { return X >  Y ; }
template <typename A, typename B> static inline int llvm_fcmp_ole(A X, B Y) { return X <= Y ; }
template <typename A, typename B> static inline int llvm_fcmp_oge(A X, B Y) { return X >= Y ; }
template <typename A> A *Memset(A *ptr, int count, size_t len) { return (A *)memset(ptr, count, len); }


/* Global Variable Definitions and Initialization */
static l_array_0 NoisePerm = l_array_0 ::init(151u, 160u, 137u, 91u, 90u, 15u, 131u, 13u, 201u, 95u, 96u, 53u, 194u, 233u, 7u, 225u, 140u, 36u, 103u, 30u, 69u, 142u, 8u, 99u, 37u, 240u, 21u, 10u, 23u, 190u, 6u, 148u, 247u, 120u, 234u, 75u, 0u, 26u, 197u, 62u, 94u, 252u, 219u, 203u, 117u, 35u, 11u, 32u, 57u, 177u, 33u, 88u, 237u, 149u, 56u, 87u, 174u, 20u, 125u, 136u, 171u, 168u, 68u, 175u, 74u, 165u, 71u, 134u, 139u, 48u, 27u, 166u, 77u, 146u, 158u, 231u, 83u, 111u, 229u, 122u, 60u, 211u, 133u, 230u, 220u, 105u, 92u, 41u, 55u, 46u, 245u, 40u, 244u, 102u, 143u, 54u, 65u, 25u, 63u, 161u, 1u, 216u, 80u, 73u, 209u, 76u, 132u, 187u, 208u, 89u, 18u, 169u, 200u, 196u, 135u, 130u, 116u, 188u, 159u, 86u, 164u, 100u, 109u, 198u, 173u, 186u, 3u, 64u, 52u, 217u, 226u, 250u, 124u, 123u, 5u, 202u, 38u, 147u, 118u, 126u, 255u, 82u, 85u, 212u, 207u, 206u, 59u, 227u, 47u, 16u, 58u, 17u, 182u, 189u, 28u, 42u, 223u, 183u, 170u, 213u, 119u, 248u, 152u, 2u, 44u, 154u, 163u, 70u, 221u, 153u, 101u, 155u, 167u, 43u, 172u, 9u, 129u, 22u, 39u, 253u, 19u, 98u, 108u, 110u, 79u, 113u, 224u, 232u, 178u, 185u, 112u, 104u, 218u, 246u, 97u, 228u, 251u, 34u, 242u, 193u, 238u, 210u, 144u, 12u, 191u, 179u, 162u, 241u, 81u, 51u, 145u, 235u, 249u, 14u, 239u, 107u, 49u, 192u, 214u, 31u, 181u, 199u, 106u, 157u, 184u, 84u, 204u, 176u, 115u, 121u, 50u, 45u, 127u, 4u, 150u, 254u, 138u, 236u, 205u, 93u, 222u, 114u, 67u, 29u, 24u, 72u, 243u, 141u, 128u, 195u, 78u, 66u, 215u, 61u, 156u, 180u, 151u, 160u, 137u, 91u, 90u, 15u, 131u, 13u, 201u, 95u, 96u, 53u, 194u, 233u, 7u, 225u, 140u, 36u, 103u, 30u, 69u, 142u, 8u, 99u, 37u, 240u, 21u, 10u, 23u, 190u, 6u, 148u, 247u, 120u, 234u, 75u, 0u, 26u, 197u, 62u, 94u, 252u, 219u, 203u, 117u, 35u, 11u, 32u, 57u, 177u, 33u, 88u, 237u, 149u, 56u, 87u, 174u, 20u, 125u, 136u, 171u, 168u, 68u, 175u, 74u, 165u, 71u, 134u, 139u, 48u, 27u, 166u, 77u, 146u, 158u, 231u, 83u, 111u, 229u, 122u, 60u, 211u, 133u, 230u, 220u, 105u, 92u, 41u, 55u, 46u, 245u, 40u, 244u, 102u, 143u, 54u, 65u, 25u, 63u, 161u, 1u, 216u, 80u, 73u, 209u, 76u, 132u, 187u, 208u, 89u, 18u, 169u, 200u, 196u, 135u, 130u, 116u, 188u, 159u, 86u, 164u, 100u, 109u, 198u, 173u, 186u, 3u, 64u, 52u, 217u, 226u, 250u, 124u, 123u, 5u, 202u, 38u, 147u, 118u, 126u, 255u, 82u, 85u, 212u, 207u, 206u, 59u, 227u, 47u, 16u, 58u, 17u, 182u, 189u, 28u, 42u, 223u, 183u, 170u, 213u, 119u, 248u, 152u, 2u, 44u, 154u, 163u, 70u, 221u, 153u, 101u, 155u, 167u, 43u, 172u, 9u, 129u, 22u, 39u, 253u, 19u, 98u, 108u, 110u, 79u, 113u, 224u, 232u, 178u, 185u, 112u, 104u, 218u, 246u, 97u, 228u, 251u, 34u, 242u, 193u, 238u, 210u, 144u, 12u, 191u, 179u, 162u, 241u, 81u, 51u, 145u, 235u, 249u, 14u, 239u, 107u, 49u, 192u, 214u, 31u, 181u, 199u, 106u, 157u, 184u, 84u, 204u, 176u, 115u, 121u, 50u, 45u, 127u, 4u, 150u, 254u, 138u, 236u, 205u, 93u, 222u, 114u, 67u, 29u, 24u, 72u, 243u, 141u, 128u, 195u, 78u, 66u, 215u, 61u, 156u, 180u);


static __vec16_f Turbulence___vyfvyfvyfuni(__vec16_f x_, __vec16_f y_, __vec16_i1 __mask_) {
  uint32_t storemerge359_;
  uint32_t storemerge359___PHI;
  __vec16_f o_2e_0358_;
  __vec16_f o_2e_0358___PHI;
  __vec16_f lambda_2e_0357_;
  __vec16_f lambda_2e_0357___PHI;
  __vec16_f sum_2e_0356_;
  __vec16_f sum_2e_0356___PHI;
  __vec16_f mul_lambda_load_x_load_;
  __vec16_f mul_lambda_load8_y_load_;
  __vec16_f mul_lambda_load9_z_load_;
  __vec16_f calltmp_2e_i_2e_i_2e_i_;
  __vec16_i32 calltmp_to_int32_2e_i_2e_i_;
  __vec16_f calltmp_2e_i_2e_i131_2e_i_;
  __vec16_i32 calltmp_to_int32_2e_i132_2e_i_;
  __vec16_f calltmp_2e_i_2e_i135_2e_i_;
  __vec16_i32 calltmp_to_int32_2e_i136_2e_i_;
  __vec16_f sub_x_load12_ix_load_to_float_2e_i_;
  __vec16_f sub_y_load13_iy_load_to_float_2e_i_;
  __vec16_f sub_z_load14_iz_load_to_float_2e_i_;
  __vec16_i32 bitop_2e_i_;
  __vec16_i32 bitop19_2e_i_;
  __vec16_i32 bitop22_2e_i_;
  __vec16_i32 gep_offset_load97_2e_i_2e_i_;
  __vec16_i32 gep11_offset_load101_2e_i_2e_i_;
  __vec16_i32 gep16_offset_load107_2e_i_2e_i_;
  __vec16_i32 bitop_2e_i_2e_i_;
  __vec16_i1 equal_h_load23__2e_i_2e_i_;
  __vec16_i1 equal_h_load24__2e_i_2e_i_;
  __vec16_f v1_2e_i_;
  __vec16_f v1_2e_i355_;
  __vec16_f v1_2e_i353_;
  __vec16_f v1_2e_i351_;
  __vec16_i32 add_ix_load29__2e_i_;
  __vec16_f sub_dx_load32__2e_i_;
  __vec16_i32 gep_offset_load97_2e_i145_2e_i_;
  __vec16_i32 gep11_offset_load101_2e_i147_2e_i_;
  __vec16_i32 gep16_offset_load107_2e_i149_2e_i_;
  __vec16_i32 bitop_2e_i150_2e_i_;
  __vec16_i1 equal_h_load23__2e_i152_2e_i_;
  __vec16_i1 equal_h_load24__2e_i154_2e_i_;
  __vec16_f v1_2e_i349_;
  __vec16_f v1_2e_i347_;
  __vec16_f v1_2e_i345_;
  __vec16_f v1_2e_i343_;
  __vec16_i32 add_iy_load39__2e_i_;
  __vec16_f sub_dy_load42__2e_i_;
  __vec16_i32 gep_offset_load97_2e_i178_2e_i_;
  __vec16_i32 gep11_offset_load101_2e_i180_2e_i_;
  __vec16_i32 gep16_offset_load107_2e_i182_2e_i_;
  __vec16_i32 bitop_2e_i183_2e_i_;
  __vec16_i1 equal_h_load23__2e_i185_2e_i_;
  __vec16_i1 equal_h_load24__2e_i187_2e_i_;
  __vec16_f v1_2e_i341_;
  __vec16_f v1_2e_i339_;
  __vec16_f v1_2e_i337_;
  __vec16_f v1_2e_i335_;
  __vec16_i32 gep_offset_load97_2e_i211_2e_i_;
  __vec16_i32 gep11_offset_load101_2e_i213_2e_i_;
  __vec16_i32 gep16_offset_load107_2e_i215_2e_i_;
  __vec16_i32 bitop_2e_i216_2e_i_;
  __vec16_i1 equal_h_load23__2e_i218_2e_i_;
  __vec16_i1 equal_h_load24__2e_i220_2e_i_;
  __vec16_f v1_2e_i333_;
  __vec16_f v1_2e_i331_;
  __vec16_f v1_2e_i329_;
  __vec16_f v1_2e_i327_;
  __vec16_i32 add_iz_load58__2e_i_;
  __vec16_f sub_dz_load61__2e_i_;
  __vec16_i32 gep_offset_load97_2e_i244_2e_i_;
  __vec16_i32 gep11_offset_load101_2e_i246_2e_i_;
  __vec16_i32 gep16_offset_load107_2e_i248_2e_i_;
  __vec16_i32 bitop_2e_i249_2e_i_;
  __vec16_i1 equal_h_load23__2e_i251_2e_i_;
  __vec16_i1 equal_h_load24__2e_i253_2e_i_;
  __vec16_f v1_2e_i325_;
  __vec16_f v1_2e_i323_;
  __vec16_f v1_2e_i321_;
  __vec16_f v1_2e_i319_;
  __vec16_i32 gep_offset_load97_2e_i277_2e_i_;
  __vec16_i32 gep11_offset_load101_2e_i279_2e_i_;
  __vec16_i32 gep16_offset_load107_2e_i281_2e_i_;
  __vec16_i32 bitop_2e_i282_2e_i_;
  __vec16_i1 equal_h_load23__2e_i284_2e_i_;
  __vec16_i1 equal_h_load24__2e_i286_2e_i_;
  __vec16_f v1_2e_i317_;
  __vec16_f v1_2e_i315_;
  __vec16_f v1_2e_i313_;
  __vec16_f v1_2e_i311_;
  __vec16_i32 gep_offset_load97_2e_i310_2e_i_;
  __vec16_i32 gep11_offset_load101_2e_i312_2e_i_;
  __vec16_i32 gep16_offset_load107_2e_i314_2e_i_;
  __vec16_i32 bitop_2e_i315_2e_i_;
  __vec16_i1 equal_h_load23__2e_i317_2e_i_;
  __vec16_i1 equal_h_load24__2e_i319_2e_i_;
  __vec16_f v1_2e_i309_;
  __vec16_f v1_2e_i307_;
  __vec16_f v1_2e_i305_;
  __vec16_f v1_2e_i303_;
  __vec16_i32 gep_offset_load97_2e_i343_2e_i_;
  __vec16_i32 gep11_offset_load101_2e_i345_2e_i_;
  __vec16_i32 gep16_offset_load107_2e_i347_2e_i_;
  __vec16_i32 bitop_2e_i348_2e_i_;
  __vec16_i1 equal_h_load23__2e_i350_2e_i_;
  __vec16_i1 equal_h_load24__2e_i352_2e_i_;
  __vec16_f v1_2e_i301_;
  __vec16_f v1_2e_i299_;
  __vec16_f v1_2e_i297_;
  __vec16_f v1_2e_i295_;
  __vec16_f mul_mul_t_load_t_load2_t_load3_2e_i_2e_i_;
  __vec16_f mul_t3_load_t_load4_2e_i_2e_i_;
  __vec16_f add_sub_mul_mul__t4_load_t_load5_mul__t4_load6_mul__t3_load7_2e_i_2e_i_;
  __vec16_f mul_mul_t_load_t_load2_t_load3_2e_i375_2e_i_;
  __vec16_f mul_t3_load_t_load4_2e_i376_2e_i_;
  __vec16_f add_sub_mul_mul__t4_load_t_load5_mul__t4_load6_mul__t3_load7_2e_i382_2e_i_;
  __vec16_f mul_mul_t_load_t_load2_t_load3_2e_i386_2e_i_;
  __vec16_f mul_t3_load_t_load4_2e_i387_2e_i_;
  __vec16_f add_sub_mul_mul__t4_load_t_load5_mul__t4_load6_mul__t3_load7_2e_i393_2e_i_;
  __vec16_f sub__t_load_2e_i_2e_i_;
  __vec16_f sub__t_load_2e_i407_2e_i_;
  __vec16_f add_sum_load_calltmp14_;
  uint32_t i_load20_plus1_;

  storemerge359___PHI = 0u;   /* for PHI node */
  o_2e_0358___PHI = __smear_float<__vec16_f>(0x1p+0);   /* for PHI node */
  lambda_2e_0357___PHI = __smear_float<__vec16_f>(0x1p+0);   /* for PHI node */
  sum_2e_0356___PHI = __setzero_float<__vec16_f>();   /* for PHI node */
  goto for_loop_label;

  do {     /* Syntactic loop 'for_loop' to make GCC happy */
for_loop_label: {
  storemerge359_ = storemerge359___PHI;
  o_2e_0358_ = o_2e_0358___PHI;
  lambda_2e_0357_ = lambda_2e_0357___PHI;
  sum_2e_0356_ = sum_2e_0356___PHI;
  mul_lambda_load_x_load_ = __mul(lambda_2e_0357_, x_);
  mul_lambda_load8_y_load_ = __mul(lambda_2e_0357_, y_);
  mul_lambda_load9_z_load_ = __mul(lambda_2e_0357_, __smear_float<__vec16_f>(0x1.333334p-1));
  calltmp_2e_i_2e_i_2e_i_ = __floor_varying_float(mul_lambda_load_x_load_);
  calltmp_to_int32_2e_i_2e_i_ = (__cast_fptosi(__vec16_i32 (), calltmp_2e_i_2e_i_2e_i_));
  calltmp_2e_i_2e_i131_2e_i_ = __floor_varying_float(mul_lambda_load8_y_load_);
  calltmp_to_int32_2e_i132_2e_i_ = (__cast_fptosi(__vec16_i32 (), calltmp_2e_i_2e_i131_2e_i_));
  calltmp_2e_i_2e_i135_2e_i_ = __floor_varying_float(mul_lambda_load9_z_load_);
  calltmp_to_int32_2e_i136_2e_i_ = (__cast_fptosi(__vec16_i32 (), calltmp_2e_i_2e_i135_2e_i_));
  sub_x_load12_ix_load_to_float_2e_i_ = __sub(mul_lambda_load_x_load_, ((__cast_sitofp(__vec16_f (), calltmp_to_int32_2e_i_2e_i_))));
  sub_y_load13_iy_load_to_float_2e_i_ = __sub(mul_lambda_load8_y_load_, ((__cast_sitofp(__vec16_f (), calltmp_to_int32_2e_i132_2e_i_))));
  sub_z_load14_iz_load_to_float_2e_i_ = __sub(mul_lambda_load9_z_load_, ((__cast_sitofp(__vec16_f (), calltmp_to_int32_2e_i136_2e_i_))));
  bitop_2e_i_ = __and(calltmp_to_int32_2e_i_2e_i_, __smear_i32<__vec16_i32>(255u));
  bitop19_2e_i_ = __and(calltmp_to_int32_2e_i132_2e_i_, __smear_i32<__vec16_i32>(255u));
  bitop22_2e_i_ = __and(calltmp_to_int32_2e_i136_2e_i_, __smear_i32<__vec16_i32>(255u));
  gep_offset_load97_2e_i_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, bitop_2e_i_, __mask_);
  gep11_offset_load101_2e_i_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, (__add(gep_offset_load97_2e_i_2e_i_, bitop19_2e_i_)), __mask_);
  gep16_offset_load107_2e_i_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, (__add(gep11_offset_load101_2e_i_2e_i_, bitop22_2e_i_)), __mask_);
  bitop_2e_i_2e_i_ = __and(gep16_offset_load107_2e_i_2e_i_, __smear_i32<__vec16_i32>(15u));
  equal_h_load23__2e_i_2e_i_ = __equal_i32(bitop_2e_i_2e_i_, __smear_i32<__vec16_i32>(12u));
  equal_h_load24__2e_i_2e_i_ = __equal_i32(bitop_2e_i_2e_i_, __smear_i32<__vec16_i32>(13u));
  v1_2e_i_ = __select((__or((__or((__unsigned_less_than_i32(bitop_2e_i_2e_i_, __smear_i32<__vec16_i32>(8u))), equal_h_load23__2e_i_2e_i_)), equal_h_load24__2e_i_2e_i_)), sub_x_load12_ix_load_to_float_2e_i_, sub_y_load13_iy_load_to_float_2e_i_);
  v1_2e_i355_ = __select((__or((__or((__unsigned_less_than_i32(bitop_2e_i_2e_i_, __smear_i32<__vec16_i32>(4u))), equal_h_load23__2e_i_2e_i_)), equal_h_load24__2e_i_2e_i_)), sub_y_load13_iy_load_to_float_2e_i_, sub_z_load14_iz_load_to_float_2e_i_);
  v1_2e_i353_ = __select((__not_equal_i32((__and(gep16_offset_load107_2e_i_2e_i_, __smear_i32<__vec16_i32>(1u))), __setzero_i32<__vec16_i32>())), (__sub(__setzero_float<__vec16_f>(), v1_2e_i_)), v1_2e_i_);
  v1_2e_i351_ = __select((__not_equal_i32((__and(gep16_offset_load107_2e_i_2e_i_, __smear_i32<__vec16_i32>(2u))), __setzero_i32<__vec16_i32>())), (__sub(__setzero_float<__vec16_f>(), v1_2e_i355_)), v1_2e_i355_);
  add_ix_load29__2e_i_ = __add(bitop_2e_i_, __smear_i32<__vec16_i32>(1u));
  sub_dx_load32__2e_i_ = __add(sub_x_load12_ix_load_to_float_2e_i_, __smear_float<__vec16_f>(-0x1p+0));
  gep_offset_load97_2e_i145_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, add_ix_load29__2e_i_, __mask_);
  gep11_offset_load101_2e_i147_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, (__add(gep_offset_load97_2e_i145_2e_i_, bitop19_2e_i_)), __mask_);
  gep16_offset_load107_2e_i149_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, (__add(gep11_offset_load101_2e_i147_2e_i_, bitop22_2e_i_)), __mask_);
  bitop_2e_i150_2e_i_ = __and(gep16_offset_load107_2e_i149_2e_i_, __smear_i32<__vec16_i32>(15u));
  equal_h_load23__2e_i152_2e_i_ = __equal_i32(bitop_2e_i150_2e_i_, __smear_i32<__vec16_i32>(12u));
  equal_h_load24__2e_i154_2e_i_ = __equal_i32(bitop_2e_i150_2e_i_, __smear_i32<__vec16_i32>(13u));
  v1_2e_i349_ = __select((__or((__or((__unsigned_less_than_i32(bitop_2e_i150_2e_i_, __smear_i32<__vec16_i32>(8u))), equal_h_load23__2e_i152_2e_i_)), equal_h_load24__2e_i154_2e_i_)), sub_dx_load32__2e_i_, sub_y_load13_iy_load_to_float_2e_i_);
  v1_2e_i347_ = __select((__or((__or((__unsigned_less_than_i32(bitop_2e_i150_2e_i_, __smear_i32<__vec16_i32>(4u))), equal_h_load23__2e_i152_2e_i_)), equal_h_load24__2e_i154_2e_i_)), sub_y_load13_iy_load_to_float_2e_i_, sub_z_load14_iz_load_to_float_2e_i_);
  v1_2e_i345_ = __select((__not_equal_i32((__and(gep16_offset_load107_2e_i149_2e_i_, __smear_i32<__vec16_i32>(1u))), __setzero_i32<__vec16_i32>())), (__sub(__setzero_float<__vec16_f>(), v1_2e_i349_)), v1_2e_i349_);
  v1_2e_i343_ = __select((__not_equal_i32((__and(gep16_offset_load107_2e_i149_2e_i_, __smear_i32<__vec16_i32>(2u))), __setzero_i32<__vec16_i32>())), (__sub(__setzero_float<__vec16_f>(), v1_2e_i347_)), v1_2e_i347_);
  add_iy_load39__2e_i_ = __add(bitop19_2e_i_, __smear_i32<__vec16_i32>(1u));
  sub_dy_load42__2e_i_ = __add(sub_y_load13_iy_load_to_float_2e_i_, __smear_float<__vec16_f>(-0x1p+0));
  gep_offset_load97_2e_i178_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, bitop_2e_i_, __mask_);
  gep11_offset_load101_2e_i180_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, (__add(gep_offset_load97_2e_i178_2e_i_, add_iy_load39__2e_i_)), __mask_);
  gep16_offset_load107_2e_i182_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, (__add(gep11_offset_load101_2e_i180_2e_i_, bitop22_2e_i_)), __mask_);
  bitop_2e_i183_2e_i_ = __and(gep16_offset_load107_2e_i182_2e_i_, __smear_i32<__vec16_i32>(15u));
  equal_h_load23__2e_i185_2e_i_ = __equal_i32(bitop_2e_i183_2e_i_, __smear_i32<__vec16_i32>(12u));
  equal_h_load24__2e_i187_2e_i_ = __equal_i32(bitop_2e_i183_2e_i_, __smear_i32<__vec16_i32>(13u));
  v1_2e_i341_ = __select((__or((__or((__unsigned_less_than_i32(bitop_2e_i183_2e_i_, __smear_i32<__vec16_i32>(8u))), equal_h_load23__2e_i185_2e_i_)), equal_h_load24__2e_i187_2e_i_)), sub_x_load12_ix_load_to_float_2e_i_, sub_dy_load42__2e_i_);
  v1_2e_i339_ = __select((__or((__or((__unsigned_less_than_i32(bitop_2e_i183_2e_i_, __smear_i32<__vec16_i32>(4u))), equal_h_load23__2e_i185_2e_i_)), equal_h_load24__2e_i187_2e_i_)), sub_dy_load42__2e_i_, sub_z_load14_iz_load_to_float_2e_i_);
  v1_2e_i337_ = __select((__not_equal_i32((__and(gep16_offset_load107_2e_i182_2e_i_, __smear_i32<__vec16_i32>(1u))), __setzero_i32<__vec16_i32>())), (__sub(__setzero_float<__vec16_f>(), v1_2e_i341_)), v1_2e_i341_);
  v1_2e_i335_ = __select((__not_equal_i32((__and(gep16_offset_load107_2e_i182_2e_i_, __smear_i32<__vec16_i32>(2u))), __setzero_i32<__vec16_i32>())), (__sub(__setzero_float<__vec16_f>(), v1_2e_i339_)), v1_2e_i339_);
  gep_offset_load97_2e_i211_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, add_ix_load29__2e_i_, __mask_);
  gep11_offset_load101_2e_i213_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, (__add(gep_offset_load97_2e_i211_2e_i_, add_iy_load39__2e_i_)), __mask_);
  gep16_offset_load107_2e_i215_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, (__add(gep11_offset_load101_2e_i213_2e_i_, bitop22_2e_i_)), __mask_);
  bitop_2e_i216_2e_i_ = __and(gep16_offset_load107_2e_i215_2e_i_, __smear_i32<__vec16_i32>(15u));
  equal_h_load23__2e_i218_2e_i_ = __equal_i32(bitop_2e_i216_2e_i_, __smear_i32<__vec16_i32>(12u));
  equal_h_load24__2e_i220_2e_i_ = __equal_i32(bitop_2e_i216_2e_i_, __smear_i32<__vec16_i32>(13u));
  v1_2e_i333_ = __select((__or((__or((__unsigned_less_than_i32(bitop_2e_i216_2e_i_, __smear_i32<__vec16_i32>(8u))), equal_h_load23__2e_i218_2e_i_)), equal_h_load24__2e_i220_2e_i_)), sub_dx_load32__2e_i_, sub_dy_load42__2e_i_);
  v1_2e_i331_ = __select((__or((__or((__unsigned_less_than_i32(bitop_2e_i216_2e_i_, __smear_i32<__vec16_i32>(4u))), equal_h_load23__2e_i218_2e_i_)), equal_h_load24__2e_i220_2e_i_)), sub_dy_load42__2e_i_, sub_z_load14_iz_load_to_float_2e_i_);
  v1_2e_i329_ = __select((__not_equal_i32((__and(gep16_offset_load107_2e_i215_2e_i_, __smear_i32<__vec16_i32>(1u))), __setzero_i32<__vec16_i32>())), (__sub(__setzero_float<__vec16_f>(), v1_2e_i333_)), v1_2e_i333_);
  v1_2e_i327_ = __select((__not_equal_i32((__and(gep16_offset_load107_2e_i215_2e_i_, __smear_i32<__vec16_i32>(2u))), __setzero_i32<__vec16_i32>())), (__sub(__setzero_float<__vec16_f>(), v1_2e_i331_)), v1_2e_i331_);
  add_iz_load58__2e_i_ = __add(bitop22_2e_i_, __smear_i32<__vec16_i32>(1u));
  sub_dz_load61__2e_i_ = __add(sub_z_load14_iz_load_to_float_2e_i_, __smear_float<__vec16_f>(-0x1p+0));
  gep_offset_load97_2e_i244_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, bitop_2e_i_, __mask_);
  gep11_offset_load101_2e_i246_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, (__add(gep_offset_load97_2e_i244_2e_i_, bitop19_2e_i_)), __mask_);
  gep16_offset_load107_2e_i248_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, (__add(gep11_offset_load101_2e_i246_2e_i_, add_iz_load58__2e_i_)), __mask_);
  bitop_2e_i249_2e_i_ = __and(gep16_offset_load107_2e_i248_2e_i_, __smear_i32<__vec16_i32>(15u));
  equal_h_load23__2e_i251_2e_i_ = __equal_i32(bitop_2e_i249_2e_i_, __smear_i32<__vec16_i32>(12u));
  equal_h_load24__2e_i253_2e_i_ = __equal_i32(bitop_2e_i249_2e_i_, __smear_i32<__vec16_i32>(13u));
  v1_2e_i325_ = __select((__or((__or((__unsigned_less_than_i32(bitop_2e_i249_2e_i_, __smear_i32<__vec16_i32>(8u))), equal_h_load23__2e_i251_2e_i_)), equal_h_load24__2e_i253_2e_i_)), sub_x_load12_ix_load_to_float_2e_i_, sub_y_load13_iy_load_to_float_2e_i_);
  v1_2e_i323_ = __select((__or((__or((__unsigned_less_than_i32(bitop_2e_i249_2e_i_, __smear_i32<__vec16_i32>(4u))), equal_h_load23__2e_i251_2e_i_)), equal_h_load24__2e_i253_2e_i_)), sub_y_load13_iy_load_to_float_2e_i_, sub_dz_load61__2e_i_);
  v1_2e_i321_ = __select((__not_equal_i32((__and(gep16_offset_load107_2e_i248_2e_i_, __smear_i32<__vec16_i32>(1u))), __setzero_i32<__vec16_i32>())), (__sub(__setzero_float<__vec16_f>(), v1_2e_i325_)), v1_2e_i325_);
  v1_2e_i319_ = __select((__not_equal_i32((__and(gep16_offset_load107_2e_i248_2e_i_, __smear_i32<__vec16_i32>(2u))), __setzero_i32<__vec16_i32>())), (__sub(__setzero_float<__vec16_f>(), v1_2e_i323_)), v1_2e_i323_);
  gep_offset_load97_2e_i277_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, add_ix_load29__2e_i_, __mask_);
  gep11_offset_load101_2e_i279_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, (__add(gep_offset_load97_2e_i277_2e_i_, bitop19_2e_i_)), __mask_);
  gep16_offset_load107_2e_i281_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, (__add(gep11_offset_load101_2e_i279_2e_i_, add_iz_load58__2e_i_)), __mask_);
  bitop_2e_i282_2e_i_ = __and(gep16_offset_load107_2e_i281_2e_i_, __smear_i32<__vec16_i32>(15u));
  equal_h_load23__2e_i284_2e_i_ = __equal_i32(bitop_2e_i282_2e_i_, __smear_i32<__vec16_i32>(12u));
  equal_h_load24__2e_i286_2e_i_ = __equal_i32(bitop_2e_i282_2e_i_, __smear_i32<__vec16_i32>(13u));
  v1_2e_i317_ = __select((__or((__or((__unsigned_less_than_i32(bitop_2e_i282_2e_i_, __smear_i32<__vec16_i32>(8u))), equal_h_load23__2e_i284_2e_i_)), equal_h_load24__2e_i286_2e_i_)), sub_dx_load32__2e_i_, sub_y_load13_iy_load_to_float_2e_i_);
  v1_2e_i315_ = __select((__or((__or((__unsigned_less_than_i32(bitop_2e_i282_2e_i_, __smear_i32<__vec16_i32>(4u))), equal_h_load23__2e_i284_2e_i_)), equal_h_load24__2e_i286_2e_i_)), sub_y_load13_iy_load_to_float_2e_i_, sub_dz_load61__2e_i_);
  v1_2e_i313_ = __select((__not_equal_i32((__and(gep16_offset_load107_2e_i281_2e_i_, __smear_i32<__vec16_i32>(1u))), __setzero_i32<__vec16_i32>())), (__sub(__setzero_float<__vec16_f>(), v1_2e_i317_)), v1_2e_i317_);
  v1_2e_i311_ = __select((__not_equal_i32((__and(gep16_offset_load107_2e_i281_2e_i_, __smear_i32<__vec16_i32>(2u))), __setzero_i32<__vec16_i32>())), (__sub(__setzero_float<__vec16_f>(), v1_2e_i315_)), v1_2e_i315_);
  gep_offset_load97_2e_i310_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, bitop_2e_i_, __mask_);
  gep11_offset_load101_2e_i312_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, (__add(gep_offset_load97_2e_i310_2e_i_, add_iy_load39__2e_i_)), __mask_);
  gep16_offset_load107_2e_i314_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, (__add(gep11_offset_load101_2e_i312_2e_i_, add_iz_load58__2e_i_)), __mask_);
  bitop_2e_i315_2e_i_ = __and(gep16_offset_load107_2e_i314_2e_i_, __smear_i32<__vec16_i32>(15u));
  equal_h_load23__2e_i317_2e_i_ = __equal_i32(bitop_2e_i315_2e_i_, __smear_i32<__vec16_i32>(12u));
  equal_h_load24__2e_i319_2e_i_ = __equal_i32(bitop_2e_i315_2e_i_, __smear_i32<__vec16_i32>(13u));
  v1_2e_i309_ = __select((__or((__or((__unsigned_less_than_i32(bitop_2e_i315_2e_i_, __smear_i32<__vec16_i32>(8u))), equal_h_load23__2e_i317_2e_i_)), equal_h_load24__2e_i319_2e_i_)), sub_x_load12_ix_load_to_float_2e_i_, sub_dy_load42__2e_i_);
  v1_2e_i307_ = __select((__or((__or((__unsigned_less_than_i32(bitop_2e_i315_2e_i_, __smear_i32<__vec16_i32>(4u))), equal_h_load23__2e_i317_2e_i_)), equal_h_load24__2e_i319_2e_i_)), sub_dy_load42__2e_i_, sub_dz_load61__2e_i_);
  v1_2e_i305_ = __select((__not_equal_i32((__and(gep16_offset_load107_2e_i314_2e_i_, __smear_i32<__vec16_i32>(1u))), __setzero_i32<__vec16_i32>())), (__sub(__setzero_float<__vec16_f>(), v1_2e_i309_)), v1_2e_i309_);
  v1_2e_i303_ = __select((__not_equal_i32((__and(gep16_offset_load107_2e_i314_2e_i_, __smear_i32<__vec16_i32>(2u))), __setzero_i32<__vec16_i32>())), (__sub(__setzero_float<__vec16_f>(), v1_2e_i307_)), v1_2e_i307_);
  gep_offset_load97_2e_i343_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, add_ix_load29__2e_i_, __mask_);
  gep11_offset_load101_2e_i345_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, (__add(gep_offset_load97_2e_i343_2e_i_, add_iy_load39__2e_i_)), __mask_);
  gep16_offset_load107_2e_i347_2e_i_ = __gather_base_offsets32_i32(((uint8_t *)(&NoisePerm)), 4u, (__add(gep11_offset_load101_2e_i345_2e_i_, add_iz_load58__2e_i_)), __mask_);
  bitop_2e_i348_2e_i_ = __and(gep16_offset_load107_2e_i347_2e_i_, __smear_i32<__vec16_i32>(15u));
  equal_h_load23__2e_i350_2e_i_ = __equal_i32(bitop_2e_i348_2e_i_, __smear_i32<__vec16_i32>(12u));
  equal_h_load24__2e_i352_2e_i_ = __equal_i32(bitop_2e_i348_2e_i_, __smear_i32<__vec16_i32>(13u));
  v1_2e_i301_ = __select((__or((__or((__unsigned_less_than_i32(bitop_2e_i348_2e_i_, __smear_i32<__vec16_i32>(8u))), equal_h_load23__2e_i350_2e_i_)), equal_h_load24__2e_i352_2e_i_)), sub_dx_load32__2e_i_, sub_dy_load42__2e_i_);
  v1_2e_i299_ = __select((__or((__or((__unsigned_less_than_i32(bitop_2e_i348_2e_i_, __smear_i32<__vec16_i32>(4u))), equal_h_load23__2e_i350_2e_i_)), equal_h_load24__2e_i352_2e_i_)), sub_dy_load42__2e_i_, sub_dz_load61__2e_i_);
  v1_2e_i297_ = __select((__not_equal_i32((__and(gep16_offset_load107_2e_i347_2e_i_, __smear_i32<__vec16_i32>(1u))), __setzero_i32<__vec16_i32>())), (__sub(__setzero_float<__vec16_f>(), v1_2e_i301_)), v1_2e_i301_);
  v1_2e_i295_ = __select((__not_equal_i32((__and(gep16_offset_load107_2e_i347_2e_i_, __smear_i32<__vec16_i32>(2u))), __setzero_i32<__vec16_i32>())), (__sub(__setzero_float<__vec16_f>(), v1_2e_i299_)), v1_2e_i299_);
  mul_mul_t_load_t_load2_t_load3_2e_i_2e_i_ = __mul(sub_x_load12_ix_load_to_float_2e_i_, (__mul(sub_x_load12_ix_load_to_float_2e_i_, sub_x_load12_ix_load_to_float_2e_i_)));
  mul_t3_load_t_load4_2e_i_2e_i_ = __mul(sub_x_load12_ix_load_to_float_2e_i_, mul_mul_t_load_t_load2_t_load3_2e_i_2e_i_);
  add_sub_mul_mul__t4_load_t_load5_mul__t4_load6_mul__t3_load7_2e_i_2e_i_ = __add((__mul(mul_mul_t_load_t_load2_t_load3_2e_i_2e_i_, __smear_float<__vec16_f>(0x1.4p+3))), (__sub((__mul(sub_x_load12_ix_load_to_float_2e_i_, (__mul(mul_t3_load_t_load4_2e_i_2e_i_, __smear_float<__vec16_f>(0x1.8p+2))))), (__mul(mul_t3_load_t_load4_2e_i_2e_i_, __smear_float<__vec16_f>(0x1.ep+3))))));
  mul_mul_t_load_t_load2_t_load3_2e_i375_2e_i_ = __mul(sub_y_load13_iy_load_to_float_2e_i_, (__mul(sub_y_load13_iy_load_to_float_2e_i_, sub_y_load13_iy_load_to_float_2e_i_)));
  mul_t3_load_t_load4_2e_i376_2e_i_ = __mul(sub_y_load13_iy_load_to_float_2e_i_, mul_mul_t_load_t_load2_t_load3_2e_i375_2e_i_);
  add_sub_mul_mul__t4_load_t_load5_mul__t4_load6_mul__t3_load7_2e_i382_2e_i_ = __add((__mul(mul_mul_t_load_t_load2_t_load3_2e_i375_2e_i_, __smear_float<__vec16_f>(0x1.4p+3))), (__sub((__mul(sub_y_load13_iy_load_to_float_2e_i_, (__mul(mul_t3_load_t_load4_2e_i376_2e_i_, __smear_float<__vec16_f>(0x1.8p+2))))), (__mul(mul_t3_load_t_load4_2e_i376_2e_i_, __smear_float<__vec16_f>(0x1.ep+3))))));
  mul_mul_t_load_t_load2_t_load3_2e_i386_2e_i_ = __mul(sub_z_load14_iz_load_to_float_2e_i_, (__mul(sub_z_load14_iz_load_to_float_2e_i_, sub_z_load14_iz_load_to_float_2e_i_)));
  mul_t3_load_t_load4_2e_i387_2e_i_ = __mul(sub_z_load14_iz_load_to_float_2e_i_, mul_mul_t_load_t_load2_t_load3_2e_i386_2e_i_);
  add_sub_mul_mul__t4_load_t_load5_mul__t4_load6_mul__t3_load7_2e_i393_2e_i_ = __add((__mul(mul_mul_t_load_t_load2_t_load3_2e_i386_2e_i_, __smear_float<__vec16_f>(0x1.4p+3))), (__sub((__mul(sub_z_load14_iz_load_to_float_2e_i_, (__mul(mul_t3_load_t_load4_2e_i387_2e_i_, __smear_float<__vec16_f>(0x1.8p+2))))), (__mul(mul_t3_load_t_load4_2e_i387_2e_i_, __smear_float<__vec16_f>(0x1.ep+3))))));
  sub__t_load_2e_i_2e_i_ = __sub(__smear_float<__vec16_f>(0x1p+0), add_sub_mul_mul__t4_load_t_load5_mul__t4_load6_mul__t3_load7_2e_i_2e_i_);
  sub__t_load_2e_i407_2e_i_ = __sub(__smear_float<__vec16_f>(0x1p+0), add_sub_mul_mul__t4_load_t_load5_mul__t4_load6_mul__t3_load7_2e_i382_2e_i_);
  add_sum_load_calltmp14_ = __add(sum_2e_0356_, ((__cast_bits(__vec16_f (), (__and(((__cast_bits(__vec16_i32 (), (__mul(o_2e_0358_, (__add((__mul((__sub(__smear_float<__vec16_f>(0x1p+0), add_sub_mul_mul__t4_load_t_load5_mul__t4_load6_mul__t3_load7_2e_i393_2e_i_)), (__add((__mul(sub__t_load_2e_i407_2e_i_, (__add((__mul(sub__t_load_2e_i_2e_i_, (__add(v1_2e_i353_, v1_2e_i351_)))), (__mul(add_sub_mul_mul__t4_load_t_load5_mul__t4_load6_mul__t3_load7_2e_i_2e_i_, (__add(v1_2e_i345_, v1_2e_i343_)))))))), (__mul(add_sub_mul_mul__t4_load_t_load5_mul__t4_load6_mul__t3_load7_2e_i382_2e_i_, (__add((__mul(sub__t_load_2e_i_2e_i_, (__add(v1_2e_i337_, v1_2e_i335_)))), (__mul(add_sub_mul_mul__t4_load_t_load5_mul__t4_load6_mul__t3_load7_2e_i_2e_i_, (__add(v1_2e_i329_, v1_2e_i327_)))))))))))), (__mul(add_sub_mul_mul__t4_load_t_load5_mul__t4_load6_mul__t3_load7_2e_i393_2e_i_, (__add((__mul(sub__t_load_2e_i407_2e_i_, (__add((__mul(sub__t_load_2e_i_2e_i_, (__add(v1_2e_i321_, v1_2e_i319_)))), (__mul(add_sub_mul_mul__t4_load_t_load5_mul__t4_load6_mul__t3_load7_2e_i_2e_i_, (__add(v1_2e_i313_, v1_2e_i311_)))))))), (__mul(add_sub_mul_mul__t4_load_t_load5_mul__t4_load6_mul__t3_load7_2e_i382_2e_i_, (__add((__mul(sub__t_load_2e_i_2e_i_, (__add(v1_2e_i305_, v1_2e_i303_)))), (__mul(add_sub_mul_mul__t4_load_t_load5_mul__t4_load6_mul__t3_load7_2e_i_2e_i_, (__add(v1_2e_i297_, v1_2e_i295_))))))))))))))))))), __smear_i32<__vec16_i32>(2147483647u)))))));
  i_load20_plus1_ = ((uint32_t )(((uint32_t )storemerge359_) + ((uint32_t )1u)));
  if ((i_load20_plus1_ == 8u)) {
    goto for_exit_label;
  } else {
    storemerge359___PHI = i_load20_plus1_;   /* for PHI node */
    o_2e_0358___PHI = (__mul(o_2e_0358_, __smear_float<__vec16_f>(0x1.333334p-1)));   /* for PHI node */
    lambda_2e_0357___PHI = (__mul(lambda_2e_0357_, __smear_float<__vec16_f>(0x1.fd70a4p+0)));   /* for PHI node */
    sum_2e_0356___PHI = add_sum_load_calltmp14_;   /* for PHI node */
    goto for_loop_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop' */
for_exit_label: {
  return (__mul(add_sum_load_calltmp14_, __smear_float<__vec16_f>(0x1p-1)));
}
}


static const int32_t __attribute__ ((aligned(64))) VectorConstant0[] = { 0u, 1u, 2u, 3u, 4u, 5u, 6u, 7u, 8u, 9u, 10u, 11u, 12u, 13u, 14u, 15u,  };

void noise_ispc___unfunfunfunfuniuniun_3C_unf_3E_(float x0_, float y0_, float x1_, float y1_, uint32_t width_, uint32_t height_, float *output_, __vec16_i1 __mask_) {
  float div_sub_y1_load_y0_load_height_load_to_float_;
  __vec16_f x0_smear_;
  __vec16_f div_sub_x1_load_x0_load_width_load_to_float_smear_;
  uint8_t *output_load_ptr2int_2void_;
  uint32_t j_load35_plus1_2e_us_;
  uint32_t storemerge3638_2e_us_;
  uint32_t storemerge3638_2e_us___PHI;
  __vec16_i32 storemerge3638_2e_us_smear_;
  __vec16_f calltmp_2e_us_;
  uint32_t add_i_load34__2e_us_;
  uint32_t storemerge40_2e_us_;
  uint32_t storemerge40_2e_us___PHI;
  __vec16_f add_y0_load22_mul_j_load23_to_float_dy_load_2e_us_smear_;
  uint32_t mul_j_load24_width_load25_2e_us_;

  div_sub_y1_load_y0_load_height_load_to_float_ = ((float )((((float )(y1_ - y0_))) / (((float )(int32_t )height_))));
  if ((((int32_t )height_) > ((int32_t )0u))) {
    goto for_test12_2e_preheader_2e_lr_2e_ph_label;
  } else {
    goto for_exit_label;
  }

for_test12_2e_preheader_2e_lr_2e_ph_label: {
  x0_smear_ = __smear_float<__vec16_f>(x0_);
  div_sub_x1_load_x0_load_width_load_to_float_smear_ = __smear_float<__vec16_f>((((float )((((float )(x1_ - x0_))) / (((float )(int32_t )width_))))));
  output_load_ptr2int_2void_ = ((uint8_t *)output_);
  if ((((int32_t )width_) > ((int32_t )0u))) {
    storemerge40_2e_us___PHI = 0u;   /* for PHI node */
    goto for_loop14_2e_lr_2e_ph_2e_us_label;
  } else {
    goto for_exit_label;
  }

}
  do {     /* Syntactic loop 'for_loop14.lr.ph.us' to make GCC happy */
for_loop14_2e_lr_2e_ph_2e_us_label: {
  storemerge40_2e_us_ = storemerge40_2e_us___PHI;
  add_y0_load22_mul_j_load23_to_float_dy_load_2e_us_smear_ = __smear_float<__vec16_f>((((float )((((float )(div_sub_y1_load_y0_load_height_load_to_float_ * (((float )(int32_t )storemerge40_2e_us_))))) + y0_))));
  mul_j_load24_width_load25_2e_us_ = ((uint32_t )(((uint32_t )storemerge40_2e_us_) * ((uint32_t )width_)));
  storemerge3638_2e_us___PHI = 0u;   /* for PHI node */
  goto for_loop14_2e_us_label;

}
  do {     /* Syntactic loop 'for_loop14.us' to make GCC happy */
for_loop14_2e_us_label: {
  storemerge3638_2e_us_ = storemerge3638_2e_us___PHI;
  storemerge3638_2e_us_smear_ = __smear_i32<__vec16_i32>(storemerge3638_2e_us_);
  calltmp_2e_us_ =  /*tail*/ Turbulence___vyfvyfvyfuni((__add(x0_smear_, (__mul(div_sub_x1_load_x0_load_width_load_to_float_smear_, ((__cast_sitofp(__vec16_f (), (__add(storemerge3638_2e_us_smear_, __load<64>((const __vec16_i32  *)(VectorConstant0))))))))))), add_y0_load22_mul_j_load23_to_float_dy_load_2e_us_smear_, __mask_);
  __masked_store_float((((__vec16_f (*))((&output_load_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )((((uint32_t )(((uint32_t )storemerge3638_2e_us_) + ((uint32_t )mul_j_load24_width_load25_2e_us_)))) << 2u))))])))), calltmp_2e_us_, __mask_);
  add_i_load34__2e_us_ = ((uint32_t )(((uint32_t )storemerge3638_2e_us_) + ((uint32_t )16u)));
  if ((((int32_t )add_i_load34__2e_us_) < ((int32_t )width_))) {
    storemerge3638_2e_us___PHI = add_i_load34__2e_us_;   /* for PHI node */
    goto for_loop14_2e_us_label;
  } else {
    goto for_exit15_2e_us_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop14.us' */
for_exit15_2e_us_label: {
  j_load35_plus1_2e_us_ = ((uint32_t )(((uint32_t )storemerge40_2e_us_) + ((uint32_t )1u)));
  if ((j_load35_plus1_2e_us_ == height_)) {
    goto for_exit_label;
  } else {
    storemerge40_2e_us___PHI = j_load35_plus1_2e_us_;   /* for PHI node */
    goto for_loop14_2e_lr_2e_ph_2e_us_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop14.lr.ph.us' */
for_exit_label: {
  return;
}
}


static const int32_t __attribute__ ((aligned(64))) VectorConstant1[] = { 0u, 1u, 2u, 3u, 4u, 5u, 6u, 7u, 8u, 9u, 10u, 11u, 12u, 13u, 14u, 15u,  };

void noise_ispc(float x0_, float y0_, float x1_, float y1_, uint32_t width_, uint32_t height_, float *output_) {
  float div_sub_y1_load_y0_load_height_load_to_float_;
  __vec16_f x0_smear_;
  __vec16_f div_sub_x1_load_x0_load_width_load_to_float_smear_;
  uint8_t *output_load_ptr2int_2void_;
  uint32_t j_load35_plus1_2e_us_;
  uint32_t storemerge3638_2e_us_;
  uint32_t storemerge3638_2e_us___PHI;
  __vec16_i32 storemerge3638_2e_us_smear_;
  __vec16_f calltmp_2e_us_;
  uint32_t add_i_load34__2e_us_;
  uint32_t storemerge40_2e_us_;
  uint32_t storemerge40_2e_us___PHI;
  __vec16_f add_y0_load22_mul_j_load23_to_float_dy_load_2e_us_smear_;
  uint32_t mul_j_load24_width_load25_2e_us_;

  div_sub_y1_load_y0_load_height_load_to_float_ = ((float )((((float )(y1_ - y0_))) / (((float )(int32_t )height_))));
  if ((((int32_t )height_) > ((int32_t )0u))) {
    goto for_test12_2e_preheader_2e_lr_2e_ph_label;
  } else {
    goto for_exit_label;
  }

for_test12_2e_preheader_2e_lr_2e_ph_label: {
  x0_smear_ = __smear_float<__vec16_f>(x0_);
  div_sub_x1_load_x0_load_width_load_to_float_smear_ = __smear_float<__vec16_f>((((float )((((float )(x1_ - x0_))) / (((float )(int32_t )width_))))));
  output_load_ptr2int_2void_ = ((uint8_t *)output_);
  if ((((int32_t )width_) > ((int32_t )0u))) {
    storemerge40_2e_us___PHI = 0u;   /* for PHI node */
    goto for_loop14_2e_lr_2e_ph_2e_us_label;
  } else {
    goto for_exit_label;
  }

}
  do {     /* Syntactic loop 'for_loop14.lr.ph.us' to make GCC happy */
for_loop14_2e_lr_2e_ph_2e_us_label: {
  storemerge40_2e_us_ = storemerge40_2e_us___PHI;
  add_y0_load22_mul_j_load23_to_float_dy_load_2e_us_smear_ = __smear_float<__vec16_f>((((float )((((float )(div_sub_y1_load_y0_load_height_load_to_float_ * (((float )(int32_t )storemerge40_2e_us_))))) + y0_))));
  mul_j_load24_width_load25_2e_us_ = ((uint32_t )(((uint32_t )storemerge40_2e_us_) * ((uint32_t )width_)));
  storemerge3638_2e_us___PHI = 0u;   /* for PHI node */
  goto for_loop14_2e_us_label;

}
  do {     /* Syntactic loop 'for_loop14.us' to make GCC happy */
for_loop14_2e_us_label: {
  storemerge3638_2e_us_ = storemerge3638_2e_us___PHI;
  storemerge3638_2e_us_smear_ = __smear_i32<__vec16_i32>(storemerge3638_2e_us_);
  calltmp_2e_us_ =  /*tail*/ Turbulence___vyfvyfvyfuni((__add(x0_smear_, (__mul(div_sub_x1_load_x0_load_width_load_to_float_smear_, ((__cast_sitofp(__vec16_f (), (__add(storemerge3638_2e_us_smear_, __load<64>((const __vec16_i32  *)(VectorConstant1))))))))))), add_y0_load22_mul_j_load23_to_float_dy_load_2e_us_smear_, __smear_i1<__vec16_i1>(1));
  __store<4>((((__vec16_f (*))((&output_load_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )((((uint32_t )(((uint32_t )storemerge3638_2e_us_) + ((uint32_t )mul_j_load24_width_load25_2e_us_)))) << 2u))))])))), calltmp_2e_us_);
  add_i_load34__2e_us_ = ((uint32_t )(((uint32_t )storemerge3638_2e_us_) + ((uint32_t )16u)));
  if ((((int32_t )add_i_load34__2e_us_) < ((int32_t )width_))) {
    storemerge3638_2e_us___PHI = add_i_load34__2e_us_;   /* for PHI node */
    goto for_loop14_2e_us_label;
  } else {
    goto for_exit15_2e_us_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop14.us' */
for_exit15_2e_us_label: {
  j_load35_plus1_2e_us_ = ((uint32_t )(((uint32_t )storemerge40_2e_us_) + ((uint32_t )1u)));
  if ((j_load35_plus1_2e_us_ == height_)) {
    goto for_exit_label;
  } else {
    storemerge40_2e_us___PHI = j_load35_plus1_2e_us_;   /* for PHI node */
    goto for_loop14_2e_lr_2e_ph_2e_us_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop14.lr.ph.us' */
for_exit_label: {
  return;
}
}

